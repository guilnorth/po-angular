{"version":3,"file":"po-ui-ng-code-editor.mjs","sources":["../../../projects/code-editor/src/lib/components/po-code-editor/po-code-editor-base.component.ts","../../../projects/code-editor/src/lib/components/po-code-editor/po-code-editor-suggestion.service.ts","../../../projects/code-editor/src/lib/components/po-code-editor/po-code-editor-register.service.ts","../../../projects/code-editor/src/lib/components/po-code-editor/po-code-editor.component.ts","../../../projects/code-editor/src/lib/components/po-code-editor/po-code-editor.component.html","../../../projects/code-editor/src/lib/components/po-code-editor/po-code-editor.module.ts","../../../projects/code-editor/src/po-ui-ng-code-editor.ts"],"sourcesContent":["import { Input, Directive } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\n\r\nimport { PoCodeEditorRegisterableSuggestion } from './interfaces/po-code-editor-registerable-suggestion.interface';\r\n\r\nconst PO_CODE_EDITOR_THEMES = ['vs-dark', 'vs', 'hc-black'];\r\nconst PO_CODE_EDITOR_THEME_DEFAULT = 'vs';\r\n\r\n/**\r\n * @description\r\n *\r\n * O `po-code-editor` é um componente para edição de código fonte baseado no Monaco Editor da Microsoft.\r\n *\r\n * Sendo assim, algumas configurações presentes no Monaco podem ser utilizadas aqui, como a escolha da linguagem\r\n * (utilizando o highlight syntax específico), escolha do tema e opção de diff, além de ser muito similar ao Visual\r\n * Studio Code, com autocomplete e fechamento automático de brackets.\r\n *\r\n * Este componente pode ser usado em qualquer situação que necessite de adição de códigos, como por exemplo, criar\r\n * receitas utilizando Terraform para gerenciar topologias.\r\n * É importante ressaltar que este não é um componente para edição de textos comuns.\r\n *\r\n * O [(ngModel)] deve ser usado para manipular o conteúdo do po-code-editor, ou seja, tanto para incluir um conteúdo quanto\r\n * para recuperar o conteúdo do po-code-editor, utiliza-se uma variável passada por [(ngModel)].\r\n *\r\n * #### Adicionando o pacote @po-ui/ng-code-editor\r\n *\r\n * Para instalar o pacote `po-code-editor` em sua aplicação execute:\r\n *\r\n * ```shell\r\n * ng add @po-ui/ng-code-editor\r\n * ```\r\n *\r\n * O comando `ng add` do `Angular CLI`:\r\n * - inclui o `po-code-editor` no seu projeto;\r\n * - adiciona o módulo `PoCodeEditorModule`:;\r\n *\r\n * ```\r\n * // app.module.ts\r\n * ...\r\n * import { PoModule } from '@po-ui/ng-components';\r\n * import { PoCodeEditorModule } from '@po-ui/ng-code-editor';\r\n * ...\r\n * @NgModule({\r\n *   imports: [\r\n *     ...\r\n *     PoModule,\r\n *     PoCodeEditorModule\r\n *   ],\r\n *   ...\r\n * })\r\n * export class AppModule { }\r\n * ```\r\n *\r\n * - adiciona o tema PO UI e também o *asset* do Monaco no arquivo `angular.json`, conforme abaixo:\r\n *\r\n * <pre ngNonBindable>\r\n * ...\r\n * \"assets\": [\r\n *    { \"glob\": \"&#42;&#42;/&#42;\", \"input\": \"node_modules/monaco-editor/min\", \"output\": \"/assets/monaco/\" }\r\n *  ],\r\n * \"styles\": [\r\n *    \"./node_modules/@po-ui/style/css/po-theme-default.min.css\"\r\n * ]\r\n * ...\r\n * </pre>\r\n */\r\n@Directive()\r\nexport abstract class PoCodeEditorBaseComponent implements ControlValueAccessor {\r\n  editor: any;\r\n  modifiedValue: string = '';\r\n  value: any = '';\r\n\r\n  private _height: number = 150;\r\n  private _language = 'plainText';\r\n  private _readonly: boolean = false;\r\n  private _showDiff: boolean = false;\r\n  private _suggestions: Array<PoCodeEditorRegisterableSuggestion>;\r\n  private _theme = PO_CODE_EDITOR_THEME_DEFAULT;\r\n\r\n  /**\r\n   * @optional\r\n   *\r\n   * @description\r\n   *\r\n   * Linguagem na qual será apresentado o código fonte.\r\n   * Para saber quais são as linguagens compatíveis, consulte a documentação oficial do\r\n   * [**Monaco Editor**](https://microsoft.github.io/monaco-editor/).\r\n   *\r\n   * Também é possível adicionar uma nova linguagem personalizada utilizando o serviço:\r\n   * [**po-code-editor-register**](https://po-ui.io/documentation/po-code-editor-register?view=doc).\r\n   *\r\n   * @default `plainText`\r\n   */\r\n  @Input('p-language') set language(language: string) {\r\n    this._language = language && language.length ? language.trim() : 'plainText';\r\n\r\n    if (this.editor && this._language) {\r\n      this.setLanguage(this._language);\r\n    }\r\n  }\r\n\r\n  get language(): string {\r\n    return this._language;\r\n  }\r\n\r\n  /**\r\n   * @optional\r\n   *\r\n   * @description\r\n   *\r\n   * Indica se o editor será aberto em modo de leitura.\r\n   *\r\n   * Neste caso, não é possível editar o código inserido.\r\n   *\r\n   * Obs: Esta propriedade não refletirá efeito se alterada após o carregamento do componente.\r\n   *\r\n   * @default `false`\r\n   */\r\n  @Input('p-readonly') set readonly(readonly: boolean) {\r\n    this._readonly = <any>readonly === '' ? true : this.convertToBoolean(readonly);\r\n\r\n    if (this.editor) {\r\n      this.setReadOnly(readonly);\r\n    }\r\n  }\r\n\r\n  get readonly(): boolean {\r\n    return this._readonly;\r\n  }\r\n\r\n  /**\r\n   * @optional\r\n   *\r\n   * @description\r\n   *\r\n   * Indica se o editor será aberto em modo de comparação.\r\n   *\r\n   * Caso esteja habilitada esta opção, então o [(ngModel)] deverá ser passado como um array, cuja primeira opção deve\r\n   * conter uma string com o código original e na segunda posição uma string código modificado para efeito de\r\n   * comparação. Neste caso, o usuário conseguirá editar apenas o código modificado e isso refletirá na segunda posição\r\n   * do array consequentemente.\r\n   *\r\n   * Obs: Esta propriedade não refletirá efeito se alterada após o carregamento do componente.\r\n   *\r\n   * @default `false`\r\n   */\r\n  @Input('p-show-diff') set showDiff(showDiff: boolean) {\r\n    this._showDiff = <any>showDiff === '' ? true : this.convertToBoolean(showDiff);\r\n  }\r\n\r\n  get showDiff(): boolean {\r\n    return this._showDiff;\r\n  }\r\n\r\n  /**\r\n   * @optional\r\n   *\r\n   * @description\r\n   *\r\n   * Lista de sugestões usadas pelo autocomplete dentro do editor.\r\n   *\r\n   * Para visualizar a lista de sugestões use o comando `CTRL + SPACE`.\r\n   *\r\n   * Caso o editor esteja usando uma linguagem que já tenha uma lista de sugestões predefinida, o valor passado será adicionado\r\n   * a lista preexistente, aumentando as opções para o usuário.\r\n   *\r\n   * Caso tenha mais de um editor da mesma linguagem na aplicação, as sugestões serão adicionadas para que todos os editores da mesma linguagem\r\n   * tenham as mesmas sugestões.\r\n   *\r\n   * ```\r\n   *  <po-code-editor\r\n   *    [p-suggestions]=\"[{ label: 'po', insertText: 'Portinari UI' }, { label: 'ng', insertText: 'Angular' }]\">\r\n   *  </po-code-editor>\r\n   * ```\r\n   *\r\n   * Ao fornecer uma lista de sugestões é possível acelerar a escrita de scripts pelos usuários.\r\n   */\r\n  @Input('p-suggestions') set suggestions(values: Array<PoCodeEditorRegisterableSuggestion>) {\r\n    this._suggestions = values;\r\n\r\n    if (this.editor && this._suggestions) {\r\n      this.setSuggestions(this._suggestions);\r\n    }\r\n  }\r\n\r\n  get suggestions(): Array<PoCodeEditorRegisterableSuggestion> {\r\n    return this._suggestions;\r\n  }\r\n\r\n  /**\r\n   * @optional\r\n   *\r\n   * @description\r\n   *\r\n   * Define um tema para o editor.\r\n   *\r\n   * Temas válidos:\r\n   *  - `vs-dark`\r\n   *  - `vs`\r\n   *  - `hc-black`\r\n   *\r\n   * É importante salientar que o tema será aplicados a todos os componentes po-code-editor existentes na tela,\r\n   * ou seja, todas as instâncias do componente receberão o último tema atribuído ou o tema da última instância\r\n   * criada.\r\n   *\r\n   * @default `vs`\r\n   */\r\n  @Input('p-theme') set theme(theme: string) {\r\n    this._theme = PO_CODE_EDITOR_THEMES.includes(theme) ? theme : PO_CODE_EDITOR_THEME_DEFAULT;\r\n\r\n    if (this.editor) {\r\n      this.setTheme(theme);\r\n    }\r\n  }\r\n\r\n  get theme(): string {\r\n    return this._theme;\r\n  }\r\n\r\n  /**\r\n   * @optional\r\n   *\r\n   * @description\r\n   *\r\n   * Define a altura do componente em pixels do po-code-editor.\r\n   * Esta propriedade não poderá ser alterada após o componente ter sido iniciado.\r\n   * A altura mínima é 150 pixels.\r\n   */\r\n  @Input('p-height') set height(height: string) {\r\n    this._height = parseFloat(height) >= 150 ? parseFloat(height) : 150;\r\n  }\r\n\r\n  get height(): string {\r\n    return `${this._height}px`;\r\n  }\r\n\r\n  /* istanbul ignore next */\r\n  onTouched = (value: any) => {};\r\n  /* istanbul ignore next */\r\n  onChangePropagate = (value: any) => {};\r\n\r\n  getOptions() {\r\n    return { language: this.language, theme: this.theme, readOnly: this.readonly };\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChangePropagate = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  protected convertToBoolean(val: any): boolean {\r\n    if (typeof val === 'string') {\r\n      val = val.toLowerCase().trim();\r\n      return val === 'true' || val === 'on' || val === '';\r\n    }\r\n\r\n    if (typeof val === 'number') {\r\n      return val === 1;\r\n    }\r\n\r\n    return !!val;\r\n  }\r\n\r\n  abstract writeValue(value: any);\r\n\r\n  abstract setLanguage(value: any);\r\n\r\n  abstract setTheme(value: any);\r\n\r\n  abstract setReadOnly(value: any);\r\n\r\n  abstract setSuggestions(value: any);\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  PoCodeEditorSuggestionList,\r\n  PoCodeEditorRegisterableSuggestion\r\n} from './interfaces/po-code-editor-registerable-suggestion.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PoCodeEditorSuggestionService {\r\n  private suggestions: PoCodeEditorSuggestionList = {};\r\n  constructor() {}\r\n\r\n  public getSuggestion(language: string, newSuggestion: Array<PoCodeEditorRegisterableSuggestion>) {\r\n    if (this.suggestions[language]) {\r\n      const deduplicateSuggestions = this.deduplicateSuggestions(this.suggestions[language], newSuggestion);\r\n      this.suggestions[language] = [...this.suggestions[language], ...deduplicateSuggestions];\r\n      return deduplicateSuggestions;\r\n    } else {\r\n      return (this.suggestions[language] = [...newSuggestion]);\r\n    }\r\n  }\r\n\r\n  private deduplicateSuggestions(\r\n    originalSuggestions: Array<PoCodeEditorRegisterableSuggestion>,\r\n    newSuggestions: Array<PoCodeEditorRegisterableSuggestion>\r\n  ) {\r\n    return newSuggestions.filter(\r\n      newItem => !originalSuggestions.find(originalItem => originalItem['label'] === newItem['label'])\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { PoCodeEditorRegisterable } from './interfaces/po-code-editor-registerable.interface';\r\nimport { PoCodeEditorRegisterableOptions } from './interfaces/po-code-editor-registerable-options.interface';\r\nimport { PoCodeEditorRegisterableSuggestionType } from './interfaces/po-code-editor-registerable-suggestion.interface';\r\n\r\n/**\r\n * @description\r\n *\r\n * Wrapper para registro de sintaxes customizadas para o po-code-editor.\r\n *\r\n * Para utilização do serviço de idiomas **PoCodeEditorRegister**,\r\n * deve-se importar o módulo PoCodeEditorModule mesmo já tendo importado\r\n * o módulo PoModule.\r\n * Na importação opcionalmente pode ser invocado o método **forRegister** informando um objeto para configuração.\r\n *\r\n * Exemplo de configuração:\r\n * ```\r\n * import { PoCodeEditorModule, PoCodeEditorRegisterable } from '@po-ui/ng-code-editor';\r\n *\r\n * declare const monaco: any; // Importante para usar configurações com tipos definidos pelo Monaco\r\n *\r\n * // A função `provideCompletionItems` precisa ser exportada para ser compatível com AOT.\r\n * export function provideCompletionItems() {\r\n *   const suggestions = [{\r\n *     label: 'terraform',\r\n *     insertText: '#terraform language'\r\n *   }, {\r\n *     label: 'server',\r\n *     insertText: 'server ${1:ip}'\r\n *   }];\r\n *\r\n *   return { suggestions: suggestions };\r\n * }\r\n *\r\n * const customEditor: PoCodeEditorRegisterable = {\r\n *   language: 'terraform',\r\n *   options: {\r\n *     keywords: ['resource', 'provider', 'variable', 'output', 'module', 'true', 'false'],\r\n *     operators: ['{', '}', '(', ')', '[', ']', '?', ':'],\r\n *     symbols:  /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n *     escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n *     tokenizer: {\r\n *      ...\r\n *     }\r\n *   },\r\n *   suggestions: { provideCompletionItems: provideCompletionItems }\r\n * };\r\n *\r\n * @NgModule({\r\n *   declarations: [],\r\n *   imports: [\r\n *     PoModule,\r\n *     PoCodeEditorModule.forRegister(customEditor)\r\n *   ],\r\n *   bootstrap: [AppComponent]\r\n * })\r\n * ```\r\n *\r\n * > As configurações para o registro de uma nova sintaxe no Monaco code editor podem ser encontradas em\r\n * > [**Monaco Editor**](https://microsoft.github.io/monaco-editor/playground.html#extending-language-services-custom-languages).\r\n */\r\n@Injectable()\r\nexport class PoCodeEditorRegister implements PoCodeEditorRegisterable {\r\n  /** Sintaxe a ser registrada. */\r\n  language: string;\r\n\r\n  /** Opções da sintaxe para registro no po-code-editor. */\r\n  options: PoCodeEditorRegisterableOptions;\r\n\r\n  /** Lista de sugestões para a função de autocomplete (CTRL + SPACE). */\r\n  suggestions?: PoCodeEditorRegisterableSuggestionType;\r\n}\r\n","import { AfterViewInit, Component, DoCheck, ElementRef, forwardRef, NgZone, ViewChild, Provider } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { PoCodeEditorBaseComponent } from './po-code-editor-base.component';\r\nimport { PoCodeEditorRegister } from './po-code-editor-register.service';\r\nimport { PoCodeEditorRegisterableSuggestion } from './interfaces/po-code-editor-registerable-suggestion.interface';\r\nimport { PoCodeEditorSuggestionService } from './po-code-editor-suggestion.service';\r\n\r\n// variáveis relacionadas ao Monaco\r\nlet loadedMonaco: boolean = false;\r\nlet loadPromise: Promise<void>;\r\n\r\ndeclare const monaco: any;\r\n// eslint-disable-next-line\r\ndeclare const require: any;\r\n\r\n/* istanbul ignore next */\r\nconst providers: Array<Provider> = [\r\n  {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    // eslint-disable-next-line\r\n    useExisting: forwardRef(() => PoCodeEditorComponent),\r\n    multi: true\r\n  }\r\n];\r\n\r\n/**\r\n * @docsExtends PoCodeEditorBaseComponent\r\n *\r\n * @example\r\n *\r\n * <example name=\"po-code-editor-basic\" title=\"PO Code Editor Basic\">\r\n *  <file name=\"sample-po-code-editor-basic/sample-po-code-editor-basic.component.html\"> </file>\r\n *  <file name=\"sample-po-code-editor-basic/sample-po-code-editor-basic.component.ts\"> </file>\r\n * </example>\r\n *\r\n * <example name=\"po-code-editor-labs\" title=\"PO Code Editor Labs\">\r\n *  <file name=\"sample-po-code-editor-labs/sample-po-code-editor-labs.component.html\"> </file>\r\n *  <file name=\"sample-po-code-editor-labs/sample-po-code-editor-labs.component.ts\"> </file>\r\n * </example>\r\n *\r\n * <example name=\"po-code-editor-diff\" title=\"PO Code Editor - Diff\">\r\n *  <file name=\"sample-po-code-editor-diff/sample-po-code-editor-diff.component.html\"> </file>\r\n *  <file name=\"sample-po-code-editor-diff/sample-po-code-editor-diff.component.ts\"> </file>\r\n * </example>\r\n *\r\n * <example name=\"po-code-editor-terraform\" title=\"PO Code Editor - Terraform\">\r\n *  <file name=\"sample-po-code-editor-terraform/sample-po-code-editor-terraform.component.html\"> </file>\r\n *  <file name=\"sample-po-code-editor-terraform/sample-po-code-editor-terraform.component.ts\"> </file>\r\n *  <file name=\"sample-po-code-editor-terraform/sample-po-code-editor-terraform.constant.ts\"> </file>\r\n *  <file name=\"sample-po-code-editor-terraform/sample-po-code-editor-terraform.module.ts\"> </file>\r\n * </example>\r\n *\r\n * <example name=\"po-code-editor-suggestion\" title=\"PO Code Editor Suggestion\">\r\n *  <file name=\"sample-po-code-editor-suggestion/sample-po-code-editor-suggestion.component.html\"> </file>\r\n *  <file name=\"sample-po-code-editor-suggestion/sample-po-code-editor-suggestion.component.ts\"> </file>\r\n * </example>\r\n */\r\n@Component({\r\n  selector: 'po-code-editor',\r\n  templateUrl: './po-code-editor.component.html',\r\n  providers\r\n})\r\nexport class PoCodeEditorComponent extends PoCodeEditorBaseComponent implements AfterViewInit, DoCheck {\r\n  @ViewChild('editorContainer', { static: true }) editorContainer: ElementRef;\r\n\r\n  canLoad = false;\r\n\r\n  constructor(\r\n    private zone: NgZone,\r\n    private el: ElementRef,\r\n    private poCodeEditorSuggestionService: PoCodeEditorSuggestionService,\r\n    private codeEditorRegister?: PoCodeEditorRegister\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  /* istanbul ignore next */\r\n  ngAfterViewInit(): void {\r\n    if (loadedMonaco) {\r\n      /* istanbul ignore next */\r\n      loadPromise.then(() => {\r\n        setTimeout(() => {\r\n          if (this.el.nativeElement.offsetWidth) {\r\n            this.registerCustomLanguage();\r\n            this.initMonaco(this.getOptions());\r\n          } else {\r\n            this.canLoad = true;\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      loadedMonaco = true;\r\n      loadPromise = new Promise<void>((resolve: any) => {\r\n        /* istanbul ignore next */\r\n        const onGotAmdLoader: any = () => {\r\n          (<any>window).require.config({ paths: { 'vs': './assets/monaco/vs' } });\r\n          (<any>window).require(['vs/editor/editor.main'], () => {\r\n            setTimeout(() => {\r\n              if (this.el.nativeElement.offsetWidth) {\r\n                this.registerCustomLanguage();\r\n                this.initMonaco(this.getOptions());\r\n              } else {\r\n                this.canLoad = true;\r\n              }\r\n              resolve();\r\n            });\r\n          });\r\n        };\r\n\r\n        if (!(<any>window).require) {\r\n          const loaderScript: HTMLScriptElement = document.createElement('script');\r\n          loaderScript.type = 'text/javascript';\r\n          loaderScript.src = './assets/monaco/vs/loader.js';\r\n          loaderScript.addEventListener('load', onGotAmdLoader);\r\n          document.body.appendChild(loaderScript);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.canLoad && this.el.nativeElement.offsetWidth) {\r\n      this.registerCustomLanguage();\r\n      this.initMonaco(this.getOptions());\r\n      this.canLoad = false;\r\n    }\r\n  }\r\n\r\n  /* istanbul ignore next */\r\n  monacoCreateModel(value: string) {\r\n    return monaco.editor.createModel(value);\r\n  }\r\n\r\n  setValueInEditor() {\r\n    if (this.showDiff) {\r\n      setTimeout(() => {\r\n        if (this.editor) {\r\n          this.editor.setModel({\r\n            original: this.monacoCreateModel(this.value),\r\n            modified: this.monacoCreateModel(this.modifiedValue)\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      setTimeout(() => {\r\n        if (this.editor) {\r\n          this.editor.setValue(this.value);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  setLanguage(language: string) {\r\n    if (this.showDiff) {\r\n      this.setMonacoLanguage(this.editor.getModel().original, language);\r\n      this.setMonacoLanguage(this.editor.getModel().modified, language);\r\n    } else {\r\n      this.setMonacoLanguage(this.editor.getModel(), language);\r\n    }\r\n  }\r\n\r\n  /* istanbul ignore next */\r\n  setTheme(theme: string) {\r\n    monaco.editor.setTheme(theme);\r\n  }\r\n\r\n  setReadOnly(readOnly: boolean) {\r\n    this.editor.updateOptions({ readOnly: readOnly });\r\n  }\r\n\r\n  /* istanbul ignore next */\r\n  setSuggestions(newSuggestions: Array<PoCodeEditorRegisterableSuggestion>, language = this.language) {\r\n    if (!newSuggestions) {\r\n      return;\r\n    }\r\n\r\n    const suggestions = this.poCodeEditorSuggestionService.getSuggestion(language, newSuggestions);\r\n\r\n    monaco.languages.registerCompletionItemProvider(language, {\r\n      provideCompletionItems: () => ({ suggestions })\r\n    });\r\n  }\r\n\r\n  writeValue(value) {\r\n    this.value = value && value instanceof Array ? value[0] : value;\r\n    this.modifiedValue = value && value instanceof Array && value.length > 0 ? value[1] : '';\r\n    this.setValueInEditor();\r\n  }\r\n\r\n  /* istanbul ignore next */\r\n  private initMonaco(options: any): void {\r\n    if (this.showDiff) {\r\n      this.editor = monaco.editor.createDiffEditor(this.editorContainer.nativeElement, options);\r\n\r\n      this.editor.setModel({\r\n        original: monaco.editor.createModel(this.value),\r\n        modified: monaco.editor.createModel(this.modifiedValue)\r\n      });\r\n\r\n      this.editor.onDidUpdateDiff((e: any) => {\r\n        const original = this.editor.getModel().original.getValue();\r\n        const modified = this.editor.getModel().modified.getValue();\r\n        this.onChangePropagate([original, modified]);\r\n      });\r\n    } else {\r\n      this.editor = monaco.editor.create(this.editorContainer.nativeElement, options);\r\n      this.editor.setValue(this.value);\r\n      this.editor.onDidChangeModelContent((e: any) => {\r\n        const value = this.editor.getValue();\r\n        this.onChangePropagate(value);\r\n        this.zone.run(() => (this.value = value));\r\n      });\r\n    }\r\n    setTimeout(() => {\r\n      this.setLanguage(this.language);\r\n      this.setSuggestions(this.suggestions);\r\n    }, 500);\r\n  }\r\n\r\n  /* istanbul ignore next */\r\n  private setMonacoLanguage(model, language) {\r\n    monaco.editor.setModelLanguage(model, language);\r\n  }\r\n\r\n  private registerCustomLanguage() {\r\n    if (this.codeEditorRegister.language) {\r\n      monaco.languages.register({ id: this.codeEditorRegister.language });\r\n\r\n      if (this.codeEditorRegister.options) {\r\n        monaco.languages.setMonarchTokensProvider(this.codeEditorRegister.language, this.codeEditorRegister.options);\r\n      }\r\n\r\n      if (this.codeEditorRegister.suggestions) {\r\n        this.setSuggestions(\r\n          this.codeEditorRegister.suggestions.provideCompletionItems().suggestions,\r\n          this.codeEditorRegister.language\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n","<div #editorContainer [style.height]=\"height\"></div>\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { PoCodeEditorComponent } from './po-code-editor.component';\r\nimport { PoCodeEditorRegister } from './po-code-editor-register.service';\r\nimport { PoCodeEditorRegisterable } from './interfaces/po-code-editor-registerable.interface';\r\n\r\n/**\r\n * @description\r\n *\r\n * Módulo do componente po-code-editor.\r\n */\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [PoCodeEditorComponent],\r\n  exports: [PoCodeEditorComponent],\r\n  providers: [PoCodeEditorRegister]\r\n})\r\nexport class PoCodeEditorModule {\r\n  static forRegister(props: PoCodeEditorRegisterable): ModuleWithProviders<PoCodeEditorModule> {\r\n    return {\r\n      ngModule: PoCodeEditorModule,\r\n      providers: [\r\n        {\r\n          provide: PoCodeEditorRegister,\r\n          useValue: props\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.PoCodeEditorSuggestionService","i2.PoCodeEditorRegister"],"mappings":"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"}