import { HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class PoPageDynamicTableActionsService {
    constructor(http) {
        this.http = http;
        this.headers = new HttpHeaders({
            'X-PO-SCREEN-LOCK': 'true'
        });
    }
    beforeDuplicate(action, id, body) {
        const resource = body ?? {};
        return this.executeAction({ action, resource, id });
    }
    beforeEdit(action, id, body) {
        const resource = body ?? {};
        return this.executeAction({ action, resource, id });
    }
    beforeNew(action) {
        return this.executeAction({ action });
    }
    beforeRemove(action, id, resource) {
        return this.executeAction({ action, id, resource });
    }
    beforeRemoveAll(action, resources) {
        return this.executeAction({ action, resource: resources });
    }
    beforeDetail(action, id, resource) {
        return this.executeAction({ action, id, resource });
    }
    customAction(action, resource = []) {
        return this.executeAction({ action, resource });
    }
    executeAction({ action, resource = {}, id }) {
        if (!action) {
            return of({});
        }
        if (typeof action === 'string') {
            const url = id ? `${action}/${id}` : action;
            return this.http.post(url, resource, { headers: this.headers });
        }
        if (id) {
            return of(action(id, resource));
        }
        return of(action(resource));
    }
}
PoPageDynamicTableActionsService.ɵfac = function PoPageDynamicTableActionsService_Factory(t) { return new (t || PoPageDynamicTableActionsService)(i0.ɵɵinject(i1.HttpClient)); };
PoPageDynamicTableActionsService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoPageDynamicTableActionsService, factory: PoPageDynamicTableActionsService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageDynamicTableActionsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.HttpClient }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1keW5hbWljLXRhYmxlLWFjdGlvbnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3RlbXBsYXRlcy9zcmMvbGliL2NvbXBvbmVudHMvcG8tcGFnZS1keW5hbWljLXRhYmxlL3BvLXBhZ2UtZHluYW1pYy10YWJsZS1hY3Rpb25zLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFjLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7O0FBb0J0QyxNQUFNLE9BQU8sZ0NBQWdDO0lBSzNDLFlBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7UUFKM0IsWUFBTyxHQUFnQixJQUFJLFdBQVcsQ0FBQztZQUM5QyxrQkFBa0IsRUFBRSxNQUFNO1NBQzNCLENBQUMsQ0FBQztJQUVvQyxDQUFDO0lBRXhDLGVBQWUsQ0FDYixNQUFvRCxFQUNwRCxFQUFPLEVBQ1AsSUFBUztRQUVULE1BQU0sUUFBUSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFFNUIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxVQUFVLENBQ1IsTUFBK0MsRUFDL0MsRUFBTyxFQUNQLElBQVM7UUFFVCxNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBRTVCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsU0FBUyxDQUFDLE1BQStDO1FBQ3ZELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELFlBQVksQ0FDVixNQUFpRCxFQUNqRCxFQUFVLEVBQ1YsUUFBYTtRQUViLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsZUFBZSxDQUNiLE1BQW9ELEVBQ3BELFNBQXFCO1FBRXJCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsWUFBWSxDQUNWLE1BQWlELEVBQ2pELEVBQVUsRUFDVixRQUFhO1FBRWIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxZQUFZLENBQUMsTUFBZ0QsRUFBRSxXQUFnQixFQUFFO1FBQy9FLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFTyxhQUFhLENBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQTBCO1FBQzVFLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxPQUFPLEVBQUUsQ0FBSSxFQUFFLENBQUMsQ0FBQztTQUNsQjtRQUVELElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO1lBQzlCLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUU1QyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFJLEdBQUcsRUFBRSxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDcEU7UUFDRCxJQUFJLEVBQUUsRUFBRTtZQUNOLE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztTQUNqQztRQUNELE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7O2dIQXhFVSxnQ0FBZ0M7c0ZBQWhDLGdDQUFnQyxXQUFoQyxnQ0FBZ0MsbUJBRi9CLE1BQU07dUZBRVAsZ0NBQWdDO2NBSDVDLFVBQVU7ZUFBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgUG9QYWdlRHluYW1pY1RhYmxlQWN0aW9ucyB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1wYWdlLWR5bmFtaWMtdGFibGUtYWN0aW9ucy5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb1BhZ2VEeW5hbWljVGFibGVCZWZvcmVEdXBsaWNhdGUgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tcGFnZS1keW5hbWljLXRhYmxlLWJlZm9yZS1kdXBsaWNhdGUuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgUG9QYWdlRHluYW1pY1RhYmxlQmVmb3JlRWRpdCB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1wYWdlLWR5bmFtaWMtdGFibGUtYmVmb3JlLWVkaXQuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgUG9QYWdlRHluYW1pY1RhYmxlQmVmb3JlTmV3IH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLXBhZ2UtZHluYW1pYy10YWJsZS1iZWZvcmUtbmV3LmludGVyZmFjZSc7XHJcbmltcG9ydCB7IFBvUGFnZUR5bmFtaWNUYWJsZUJlZm9yZVJlbW92ZSB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1wYWdlLWR5bmFtaWMtdGFibGUtYmVmb3JlLXJlbW92ZS5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb1BhZ2VEeW5hbWljVGFibGVCZWZvcmVEZXRhaWwgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tcGFnZS1keW5hbWljLXRhYmxlLWJlZm9yZS1kZXRhaWwuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgUG9QYWdlRHluYW1pY1RhYmxlQmVmb3JlUmVtb3ZlQWxsIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLXBhZ2UtZHluYW1pYy10YWJsZS1iZWZvcmUtcmVtb3ZlLWFsbC5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb1BhZ2VEeW5hbWljVGFibGVDdXN0b21BY3Rpb24gfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tcGFnZS1keW5hbWljLXRhYmxlLWN1c3RvbS1hY3Rpb24uaW50ZXJmYWNlJztcclxuXHJcbmludGVyZmFjZSBFeGVjdXRlQWN0aW9uUGFyYW1ldGVyIHtcclxuICBhY3Rpb246IHN0cmluZyB8IEZ1bmN0aW9uO1xyXG4gIHJlc291cmNlPzogYW55O1xyXG4gIGlkPzogc3RyaW5nIHwgbnVtYmVyO1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQb1BhZ2VEeW5hbWljVGFibGVBY3Rpb25zU2VydmljZSB7XHJcbiAgcmVhZG9ubHkgaGVhZGVyczogSHR0cEhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoe1xyXG4gICAgJ1gtUE8tU0NSRUVOLUxPQ0snOiAndHJ1ZSdcclxuICB9KTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7fVxyXG5cclxuICBiZWZvcmVEdXBsaWNhdGUoXHJcbiAgICBhY3Rpb246IFBvUGFnZUR5bmFtaWNUYWJsZUFjdGlvbnNbJ2JlZm9yZUR1cGxpY2F0ZSddLFxyXG4gICAgaWQ6IGFueSxcclxuICAgIGJvZHk6IGFueVxyXG4gICk6IE9ic2VydmFibGU8UG9QYWdlRHluYW1pY1RhYmxlQmVmb3JlRHVwbGljYXRlPiB7XHJcbiAgICBjb25zdCByZXNvdXJjZSA9IGJvZHkgPz8ge307XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZUFjdGlvbih7IGFjdGlvbiwgcmVzb3VyY2UsIGlkIH0pO1xyXG4gIH1cclxuXHJcbiAgYmVmb3JlRWRpdChcclxuICAgIGFjdGlvbjogUG9QYWdlRHluYW1pY1RhYmxlQWN0aW9uc1snYmVmb3JlRWRpdCddLFxyXG4gICAgaWQ6IGFueSxcclxuICAgIGJvZHk6IGFueVxyXG4gICk6IE9ic2VydmFibGU8UG9QYWdlRHluYW1pY1RhYmxlQmVmb3JlRWRpdD4ge1xyXG4gICAgY29uc3QgcmVzb3VyY2UgPSBib2R5ID8/IHt9O1xyXG5cclxuICAgIHJldHVybiB0aGlzLmV4ZWN1dGVBY3Rpb24oeyBhY3Rpb24sIHJlc291cmNlLCBpZCB9KTtcclxuICB9XHJcblxyXG4gIGJlZm9yZU5ldyhhY3Rpb24/OiBQb1BhZ2VEeW5hbWljVGFibGVBY3Rpb25zWydiZWZvcmVOZXcnXSk6IE9ic2VydmFibGU8UG9QYWdlRHluYW1pY1RhYmxlQmVmb3JlTmV3PiB7XHJcbiAgICByZXR1cm4gdGhpcy5leGVjdXRlQWN0aW9uKHsgYWN0aW9uIH0pO1xyXG4gIH1cclxuXHJcbiAgYmVmb3JlUmVtb3ZlKFxyXG4gICAgYWN0aW9uOiBQb1BhZ2VEeW5hbWljVGFibGVBY3Rpb25zWydiZWZvcmVSZW1vdmUnXSxcclxuICAgIGlkOiBzdHJpbmcsXHJcbiAgICByZXNvdXJjZTogYW55XHJcbiAgKTogT2JzZXJ2YWJsZTxQb1BhZ2VEeW5hbWljVGFibGVCZWZvcmVSZW1vdmU+IHtcclxuICAgIHJldHVybiB0aGlzLmV4ZWN1dGVBY3Rpb24oeyBhY3Rpb24sIGlkLCByZXNvdXJjZSB9KTtcclxuICB9XHJcblxyXG4gIGJlZm9yZVJlbW92ZUFsbChcclxuICAgIGFjdGlvbjogUG9QYWdlRHluYW1pY1RhYmxlQWN0aW9uc1snYmVmb3JlUmVtb3ZlQWxsJ10sXHJcbiAgICByZXNvdXJjZXM6IEFycmF5PGFueT5cclxuICApOiBPYnNlcnZhYmxlPFBvUGFnZUR5bmFtaWNUYWJsZUJlZm9yZVJlbW92ZUFsbD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZUFjdGlvbih7IGFjdGlvbiwgcmVzb3VyY2U6IHJlc291cmNlcyB9KTtcclxuICB9XHJcblxyXG4gIGJlZm9yZURldGFpbChcclxuICAgIGFjdGlvbjogUG9QYWdlRHluYW1pY1RhYmxlQWN0aW9uc1snYmVmb3JlRGV0YWlsJ10sXHJcbiAgICBpZDogc3RyaW5nLFxyXG4gICAgcmVzb3VyY2U6IGFueVxyXG4gICk6IE9ic2VydmFibGU8UG9QYWdlRHluYW1pY1RhYmxlQmVmb3JlRGV0YWlsPiB7XHJcbiAgICByZXR1cm4gdGhpcy5leGVjdXRlQWN0aW9uKHsgYWN0aW9uLCBpZCwgcmVzb3VyY2UgfSk7XHJcbiAgfVxyXG5cclxuICBjdXN0b21BY3Rpb24oYWN0aW9uOiBQb1BhZ2VEeW5hbWljVGFibGVDdXN0b21BY3Rpb25bJ2FjdGlvbiddLCByZXNvdXJjZTogYW55ID0gW10pIHtcclxuICAgIHJldHVybiB0aGlzLmV4ZWN1dGVBY3Rpb24oeyBhY3Rpb24sIHJlc291cmNlIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBleGVjdXRlQWN0aW9uPFQ+KHsgYWN0aW9uLCByZXNvdXJjZSA9IHt9LCBpZCB9OiBFeGVjdXRlQWN0aW9uUGFyYW1ldGVyKTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgICBpZiAoIWFjdGlvbikge1xyXG4gICAgICByZXR1cm4gb2YoPFQ+e30pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnc3RyaW5nJykge1xyXG4gICAgICBjb25zdCB1cmwgPSBpZCA/IGAke2FjdGlvbn0vJHtpZH1gIDogYWN0aW9uO1xyXG5cclxuICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0PFQ+KHVybCwgcmVzb3VyY2UsIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKGlkKSB7XHJcbiAgICAgIHJldHVybiBvZihhY3Rpb24oaWQsIHJlc291cmNlKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2YoYWN0aW9uKHJlc291cmNlKSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==