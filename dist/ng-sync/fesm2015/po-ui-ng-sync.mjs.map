{"version":3,"file":"po-ui-ng-sync.mjs","sources":["../../../projects/sync/src/lib/models/po-data-transform.model.ts","../../../projects/sync/src/lib/utils/utils.ts","../../../projects/sync/src/lib/models/po-event-sourcing-error-response.model.ts","../../../projects/sync/src/lib/services/po-event-sourcing/enums/po-event-sourcing-operation.enum.ts","../../../projects/sync/src/lib/services/po-http-client/po-http-request-type.enum.ts","../../../projects/sync/src/lib/models/po-request-type.enum.ts","../../../projects/sync/src/lib/services/po-schema/po-schema-util/po-schema-util.model.ts","../../../projects/sync/src/lib/services/po-schema/po-schema-definition/po-schema-definition.service.ts","../../../projects/sync/src/lib/services/po-schema/po-schema.service.ts","../../../projects/sync/src/lib/services/po-http-client/po-http-client.service.ts","../../../projects/sync/src/lib/services/po-event-sourcing/po-event-sourcing.service.ts","../../../projects/sync/src/lib/models/po-query-builder/po-query-builder.model.ts","../../../projects/sync/src/lib/models/po-entity/po-entity.model.ts","../../../projects/sync/src/lib/models/po-network-type.enum.ts","../../../projects/sync/src/lib/models/po-data-message.model.ts","../../../projects/sync/src/lib/models/po-network-status.model.ts","../../../projects/sync/src/lib/services/po-network/po-network.service.ts","../../../projects/sync/src/lib/services/po-sync/po-sync.service.ts","../../../projects/sync/src/lib/po-sync.module.ts","../../../projects/sync/src/po-ui-ng-sync.ts"],"sourcesContent":["/**\r\n * @description\r\n *\r\n * Classe responsável por adaptar dados de APIs que não seguem\r\n * o padrão de [API do PO UI](https://po-ui.io/guides/api).\r\n *\r\n * Essa classe deve ser estendida por uma classe que implemente cada um de seus métodos, adaptando os parâmetros de\r\n * acordo com a API do *backend* existente que se deseja comunicar.\r\n */\r\n\r\nexport abstract class PoDataTransform {\r\n  protected data: any;\r\n\r\n  /**\r\n   * @docsPrivate\r\n   *\r\n   * Método responsável por receber e armazenar os dados retornados pela API para manipulação na classe `PoDataTransform`.\r\n   *\r\n   * @param {any} data Dados retornados pela API.\r\n   */\r\n  transform(data: any): void {\r\n    this.data = data;\r\n  }\r\n\r\n  /**\r\n   * Retorna o nome da propriedade responsável por informar a data da última sincronização.\r\n   *\r\n   * @returns {string} Nome do campo que contém a data da última sincronização.\r\n   */\r\n  abstract getDateFieldName(): string;\r\n\r\n  /**\r\n   * Retorna o nome da propriedade responsável por informar a lista de registros vindos da API.\r\n   *\r\n   * @returns {string} Nome da propriedade que contém a lista de registros.\r\n   */\r\n  abstract getItemsFieldName(): string;\r\n\r\n  /**\r\n   * Retorna o nome da propriedade responsável por informar o número da página de registros que a API\r\n   * recebe como parâmetro.\r\n   *\r\n   * @returns {string} Nome da propriedade responsável por informar o número da página de registros.\r\n   */\r\n  abstract getPageParamName(): string;\r\n\r\n  /**\r\n   * Retorna o nome da propriedade responsável pela quantidade de registros que serão exibidos por página\r\n   * que a API recebe como parâmetro.\r\n   *\r\n   * @returns {string} Nome da propriedade responsável pela quantidade de registros por página.\r\n   */\r\n  abstract getPageSizeParamName(): string;\r\n\r\n  /**\r\n   * Retorna um valor `boolean`, responsável por informar se há uma nova página de registros disponível.\r\n   *\r\n   * @returns {boolean} Informa se existe próxima página de registros.\r\n   */\r\n  abstract hasNext(): boolean;\r\n}\r\n","/**\r\n * Retorna um *array* contendo os pares `[chave, valor]` do objeto.\r\n *\r\n * Semelhante ao método `Object.entries()` nativo do javascript.\r\n *\r\n * > Veja mais em: https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\r\n *\r\n * @param object Objeto que será extraído os pares [chave, valor].\r\n */\r\nexport const getObjectEntries = (object: object) => {\r\n  const objectName = Object.keys(object)[0];\r\n  const objectValue = object[objectName];\r\n\r\n  return [objectName, objectValue];\r\n};\r\n\r\n/**\r\n * Recebe um objeto e valida se o seu valor é diferente de *undefined* ou *null*.\r\n *\r\n * @param {object} parameter Objeto contento o nome do parâmetro que está sendo validado\r\n * e o seu valor.\r\n */\r\nexport const validateParameter = (parameter: object) => {\r\n  const [paramName, paramValue] = getObjectEntries(parameter);\r\n\r\n  if (paramValue === undefined || paramValue === null) {\r\n    throw new Error(`The ${paramName} parameter cannot be undefined or null`);\r\n  }\r\n};\r\n\r\n/**\r\n * Recebe um objeto e valida se o seu valor é uma instância de *Array* e se não\r\n * está vazio.\r\n *\r\n * @param value Objeto contento o nome da propriedade que está sendo validada e o seu valor.\r\n */\r\nexport const validateArray = (value: object) => {\r\n  validateParameter(value);\r\n\r\n  const [paramName, paramValue] = getObjectEntries(value);\r\n\r\n  if (!(paramValue instanceof Array)) {\r\n    throw new Error(`${paramName} is not an Array instance`);\r\n  }\r\n\r\n  if (!paramValue.length) {\r\n    throw new Error(`${paramName} cannot be empty array`);\r\n  }\r\n};\r\n\r\n/**\r\n * Recebe um arquivo e converte para uma string base64\r\n *\r\n * @param Objeto do tipo file.\r\n */\r\nexport const toBase64 = (file: File) =>\r\n  new Promise<string>((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => resolve(reader.result as string);\r\n    /* istanbul ignore next */\r\n    reader.onerror = error => reject(error);\r\n  });\r\n\r\n/**\r\n * Recebe uma string base64 e converte para um arquivo\r\n *\r\n * @param string base64.\r\n */\r\nexport const toFile = (url: string, fileName: string, mimeType: string) =>\r\n  fetch(url)\r\n    .then(result => result.arrayBuffer())\r\n    .then(buffer => new File([buffer], fileName, { type: mimeType }));\r\n","import { PoEventSourcingOperation } from './../services/po-event-sourcing/enums/po-event-sourcing-operation.enum';\r\n\r\n/**\r\n * @description\r\n *\r\n * Classe que define a resposta de erro para um item da fila de eventos que não foi enviado ao servidor por\r\n * alguma inconsistência.\r\n *\r\n * > Pode ser utilizada em casos onde um item da fila é enviado ao servidor com inconsistência nos dados, por exemplo\r\n * uma operação de *delete* ou *update* sem o `id` do objeto.\r\n */\r\nexport class PoEventSourcingErrorResponse {\r\n  /** Mensagem de erro. */\r\n  message: string;\r\n\r\n  /** Operação que havia sido requisitada. */\r\n  operation: PoEventSourcingOperation;\r\n\r\n  /* istanbul ignore next */\r\n  constructor({ message, operation }) {\r\n    this.message = message;\r\n    this.operation = operation;\r\n  }\r\n}\r\n","/**\r\n * @docsPrivate\r\n *\r\n * Define as operações realizadas no sync.\r\n */\r\n\r\nexport enum PoEventSourcingOperation {\r\n  // Operação de exclusão.\r\n  Delete = 'DELETE',\r\n\r\n  // Operação de requisição HTTP.\r\n  Http = 'HTTP',\r\n\r\n  // Operação de inserção.\r\n  Insert = 'INSERT',\r\n\r\n  // Operação de alteração.\r\n  Update = 'UPDATE'\r\n}\r\n","/**\r\n * @usedBy PoHttpClientService, PoHttpCommandResponse, PoSyncService\r\n *\r\n * @description\r\n *\r\n * Define o método de requisição HTTP.\r\n */\r\nexport enum PoHttpRequestType {\r\n  /** Método `delete` do protocolo HTTP. */\r\n  DELETE = 'DELETE',\r\n\r\n  /** Método `get` do protocolo HTTP. */\r\n  GET = 'GET',\r\n\r\n  /** Método `head` do protocolo HTTP. */\r\n  HEAD = 'HEAD',\r\n\r\n  /** Método `options` do protocolo HTTP. */\r\n  OPTIONS = 'OPTIONS',\r\n\r\n  /** Método `patch` do protocolo HTTP. */\r\n  PATCH = 'PATCH',\r\n\r\n  /** Método `post` do protocolo HTTP. */\r\n  POST = 'POST',\r\n\r\n  /** Método `put` do protocolo HTTP. */\r\n  PUT = 'PUT'\r\n}\r\n","/**\r\n * @docsPrivate\r\n *\r\n * @description\r\n *\r\n * Método de requisição HTTP.\r\n */\r\n\r\nexport enum PoRequestType {\r\n  GET = 'get',\r\n\r\n  DELETE = 'delete',\r\n\r\n  DIFF = 'diff',\r\n\r\n  PATCH = 'patch',\r\n\r\n  POST = 'post'\r\n}\r\n","import { PoRequestType } from '../../../models/po-request-type.enum';\r\nimport { PoSyncFieldOptions } from '../../po-sync/interfaces/po-sync-field-options.interface';\r\nimport { PoSyncSchema } from '../../po-sync/interfaces/po-sync-schema.interface';\r\n\r\n/**\r\n * @docsPrivate\r\n *\r\n * @description\r\n *\r\n * Serviço utilitário para operações no PoSyncSchema.\r\n */\r\nexport class PoSchemaUtil {\r\n  /** Valor `default` para o campo `lastSync`. */\r\n  public static readonly defaultLastSync: string = new Date(-8640000000000000).toISOString();\r\n\r\n  /** Nome da chave do identificador interno do sync. */\r\n  public static readonly syncInternalIdFieldName: string = 'SyncInternalId';\r\n\r\n  /** Nome da chave no `storage` para os Schemas. */\r\n  public static readonly syncSchemasName: string = 'SyncSchemas';\r\n\r\n  /**\r\n   * Verica se existem campos locais no *schema* informado.\r\n   *\r\n   * @param {PoSyncSchema} schema **Schema* a ser processado.\r\n   *\r\n   * @returns {boolean} Valor do tipo *boolean* que indica se existem campos locais no *schema* informado.\r\n   */\r\n  public static containsLocalFields(schema: PoSyncSchema): boolean {\r\n    if (schema.fields) {\r\n      return !!schema.fields.find(field => typeof field === 'object' && field.local);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retorna o valor atual do `lastSync` para determinado *schema*.\r\n   *\r\n   * @param {Array<PoSyncSchema>} storageSchemas Lista de *schemas* a serem pesquisados.\r\n   * @param {string} schemaName Nome do *schema* que se deseja ler o lastSync.\r\n   *\r\n   * @returns {string} Retorna uma *string* com o valor da última sincronização.\r\n   */\r\n  public static getLastSync(storageSchemas: Array<PoSyncSchema>, schemaName: string): string {\r\n    if (storageSchemas) {\r\n      const schemaFound = storageSchemas.find(schema => schema.name === schemaName);\r\n      return schemaFound && schemaFound.lastSync ? schemaFound.lastSync : PoSchemaUtil.defaultLastSync;\r\n    }\r\n    return PoSchemaUtil.defaultLastSync;\r\n  }\r\n\r\n  /**\r\n   * Retorna a lista de campos locais definidos no *schema*.\r\n   *\r\n   * @param {PoSyncSchema} schema **Schema* a ser processado.\r\n   */\r\n  public static getLocalFieldNames(schema: PoSyncSchema): Array<string> {\r\n    if (schema.fields) {\r\n      return schema.fields.reduce((fieldsAccumulator: Array<string>, currentField: string | PoSyncFieldOptions) => {\r\n        if (typeof currentField === 'object' && currentField.local) {\r\n          fieldsAccumulator.push(currentField.name);\r\n        }\r\n        return fieldsAccumulator;\r\n      }, []);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retorna a lista de campos não locais definidos no *schema*.\r\n   *\r\n   * @param {PoSyncSchema} schema **Schema* a ser processado.\r\n   */\r\n  public static getNonLocalFieldNames(schema: PoSyncSchema): Array<string> {\r\n    if (schema.fields) {\r\n      return schema.fields.reduce((fieldsAccumulator: Array<string>, currentField: string | PoSyncFieldOptions) => {\r\n        if (typeof currentField === 'string' || !currentField.local) {\r\n          fieldsAccumulator.push(typeof currentField === 'string' ? currentField : currentField.name);\r\n        }\r\n        return fieldsAccumulator;\r\n      }, []);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retorna o `id` referente ao registro do *schema* informado.\r\n   *\r\n   * @param {object} record Registro que será buscado o id.\r\n   * @param {PoSyncSchema} schema **Schema* a ser processado.\r\n   */\r\n  public static getRecordId(record: object, schema: PoSyncSchema) {\r\n    return record[schema.idField] || record[PoSchemaUtil.syncInternalIdFieldName];\r\n  }\r\n\r\n  /**\r\n   * Retorna a url correspondente do `PoSyncSchema` dependendo do tipo da requisição `PoRequestType`.\r\n   *\r\n   * @param {PoSyncSchema} schema **Schema* a ser processado.\r\n   * @param {PoRequestType} requestType Tipo da requisição.\r\n   */\r\n  public static getUrl(schema: PoSyncSchema, requestType: PoRequestType): string {\r\n    return schema[`${requestType}UrlApi`];\r\n  }\r\n\r\n  /**\r\n   * Compara se dois objetos são iguais baseado na lista de campos.\r\n   *\r\n   * @param {Array<string>} fields Lista de campos a serem considerados na comparação.\r\n   * @param {any} model1 Objeto 1 a ser comparado.\r\n   * @param {any} model2 Objeto 2 a ser comparado.\r\n   */\r\n  public static isModelsEqual(fields: Array<string>, model1: any, model2: any): boolean {\r\n    if (fields) {\r\n      return fields.every(field => JSON.stringify(model1[field]) === JSON.stringify(model2[field]));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retorna uma lista com dois objetos referentes ao registro informado.\r\n   * O primeiro é o registro com os campos que vão para o servidor e o segundo é com os campos locais.\r\n   *\r\n   * @param {PoSyncSchema} schema **Schema* do registro.\r\n   * @param {object} record Registro que será realizada a separação dos campos locais e do servidor.\r\n   */\r\n  public static separateSchemaFields(\r\n    schema: PoSyncSchema,\r\n    record: object\r\n  ): { serverRecord: object; localRecord: object } {\r\n    const localFields = PoSchemaUtil.getLocalFieldNames(schema);\r\n    const localRecord = {};\r\n    const serverRecord = {};\r\n\r\n    Object.keys(record).forEach(field => {\r\n      if (localFields.includes(field)) {\r\n        localRecord[field] = record[field];\r\n      } else {\r\n        serverRecord[field] = record[field];\r\n      }\r\n    });\r\n\r\n    return { serverRecord, localRecord };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { PoStorageService } from '@po-ui/ng-storage';\r\n\r\nimport { PoSchemaUtil } from './../po-schema-util/po-schema-util.model';\r\nimport { PoSyncSchema } from './../../po-sync/interfaces/po-sync-schema.interface';\r\n\r\n/**\r\n * @docsPrivate\r\n *\r\n * @description\r\n *\r\n * Serviço que disponibiliza métodos que permite operar sobre as definições dos *schemas*.\r\n */\r\n@Injectable()\r\nexport class PoSchemaDefinitionService {\r\n  constructor(private poStorage: PoStorageService) {}\r\n\r\n  /**\r\n   * Destrói a chave do *storage* que contém as definições dos *schemas*.\r\n   *\r\n   * > Para que não venham ocorrer erros em ações que dependam das definições dos *schemas*,\r\n   * recomenda-se utilizar o método `prepare()` em seguida.\r\n   *\r\n   * @returns {Promise<void>} Promessa que é resolvida quando a chave referente as definições dos *schemas* for destruída.\r\n   */\r\n  destroy(): Promise<void> {\r\n    return this.poStorage.remove(PoSchemaUtil.syncSchemasName);\r\n  }\r\n\r\n  /**\r\n   * Busca um *schema* a partir do nome informado.\r\n   *\r\n   * @param {string} schemaName Nome do *schema*.\r\n   * @returns {Promise<PoSyncSchema>} Promessa que é resolvida quando o *schema* for retornado.\r\n   */\r\n  get(schemaName: string): Promise<PoSyncSchema> {\r\n    return this.poStorage.getItemByField(PoSchemaUtil.syncSchemasName, 'name', schemaName);\r\n  }\r\n\r\n  /**\r\n   * Retorna uma promessa com a lista dos *schemas* definidos.\r\n   *\r\n   * @returns {Promise<Array<PoSyncSchema>>} Promessa que é resolvida quando a lista dos *schemas* definidos for retornada.\r\n   */\r\n  getAll(): Promise<Array<PoSyncSchema>> {\r\n    return this.poStorage.get(PoSchemaUtil.syncSchemasName);\r\n  }\r\n\r\n  /**\r\n   * Salva uma lista de *schemas*.\r\n   *\r\n   * @param {Array<PoSyncSchema>} schemas Lista de schemas que serão salvos.\r\n   * @returns {Promise<Array<PoSyncSchema>>} Promessa que é resolvida quando a lista de *schemas* for salva.\r\n   */\r\n  saveAll(schemas: Array<PoSyncSchema>): Promise<Array<PoSyncSchema>> {\r\n    return this.poStorage.set(PoSchemaUtil.syncSchemasName, schemas);\r\n  }\r\n\r\n  /**\r\n   * Atualiza um *schema* a partir do *schema name*.\r\n   *\r\n   * @param {PoSyncSchema} updatedSchema **Schema* que será atualizado.\r\n   */\r\n  async update(updatedSchema: PoSyncSchema) {\r\n    let schemas = await this.getAll();\r\n\r\n    const replaceUpdatedSchema = schema => {\r\n      if (schema.name === updatedSchema.name) {\r\n        return updatedSchema;\r\n      } else {\r\n        return schema;\r\n      }\r\n    };\r\n\r\n    schemas = schemas.map(replaceUpdatedSchema);\r\n    return this.saveAll(schemas);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { PoStorageService } from '@po-ui/ng-storage';\r\n\r\nimport { PoSchemaDefinitionService } from './po-schema-definition/po-schema-definition.service';\r\nimport { PoSchemaUtil } from './po-schema-util/po-schema-util.model';\r\nimport { PoSyncSchema } from '../po-sync/interfaces/po-sync-schema.interface';\r\n\r\n/**\r\n * @docsPrivate\r\n *\r\n * @description\r\n *\r\n * Serviço que realiza as operações nos `schemas`.\r\n */\r\n@Injectable()\r\nexport class PoSchemaService {\r\n  constructor(private poSchemaDefinitionService: PoSchemaDefinitionService, private poStorage: PoStorageService) {}\r\n\r\n  /**\r\n   * Retorna o id a partir de uma chave de um *schema*.\r\n   *\r\n   * @param {string} schemaKey Chave do *schema* em que será realizada a busca do id.\r\n   */\r\n  private static getIdByRecordKey(schemaKey: string): string {\r\n    return schemaKey.split(':')[1];\r\n  }\r\n\r\n  /**\r\n   * Retorna a chave do *schema* informado.\r\n   *\r\n   * @param {string} schemaName Nome do *schema*.\r\n   * @param {any} recordId Id do registro.\r\n   * @param {boolean} isLocalKey Indica se é uma chave local.\r\n   */\r\n  private static getRecordKey(schemaName: string, recordId: any, isLocalKey: boolean = false): string {\r\n    return isLocalKey ? `${schemaName}_local:${recordId}` : `${schemaName}:${recordId}`;\r\n  }\r\n\r\n  /**\r\n   * Verifica se o dado informado é uma chave de um *schema*.\r\n   *\r\n   * @param {string} data Dado que será verificado se é uma chave de um *schema*.\r\n   * @param {string} schemaName Nome do *schema*.\r\n   */\r\n  private static isSchemaKey(data: string, schemaName: string): boolean {\r\n    return data ? data.startsWith(`${schemaName}:`) : false;\r\n  }\r\n\r\n  /**\r\n   * Cria um novo registro para o *schema* informado.\r\n   *\r\n   * @param {PoSyncSchema} schema **Schema* em que será criado o registro.\r\n   * @param {object} newRecord Registro que será criado.\r\n   */\r\n  async create(schema: PoSyncSchema, newRecord: object): Promise<object> {\r\n    const id = PoSchemaUtil.getRecordId(newRecord, schema);\r\n    return this.save(schema, newRecord, id);\r\n  }\r\n\r\n  /**\r\n   * Destrói as chaves do *storage* que contém os registros dos *schemas*.\r\n   *\r\n   * @returns {Promise<void>} Promessa que é resolvida quando as chaves referentes aos *schemas* forem destruídas.\r\n   */\r\n  async destroySchemasRecords(): Promise<void> {\r\n    const schemas = await this.poSchemaDefinitionService.getAll();\r\n    const storageKeys = await this.poStorage.keys();\r\n\r\n    for (const key of storageKeys) {\r\n      const schemaKey = schemas.find(schema => PoSchemaService.isSchemaKey(key, schema.name));\r\n\r\n      if (schemaKey) {\r\n        const id = PoSchemaService.getIdByRecordKey(key);\r\n        await this.remove(schemaKey.name, id);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retorna o registro referente ao *schema* informado.\r\n   *\r\n   * @param {string} schemaName Nome do *schema*.\r\n   * @param {any} recordId Id do registro.\r\n   */\r\n  async get(schemaName: string, recordId: any): Promise<object> {\r\n    const isLocalRecord = true;\r\n    const localRecord = await this.getRecord(schemaName, recordId, isLocalRecord);\r\n    const record = await this.getRecord(schemaName, recordId);\r\n\r\n    return Object.assign(record, localRecord);\r\n  }\r\n\r\n  /**\r\n   * Retorna todos os registros referente ao *schema* informado.\r\n   *\r\n   * @param {string} schemaName Nome do *schema*.\r\n   */\r\n  async getAll(schemaName: string): Promise<Array<object>> {\r\n    const storageKeys = await this.poStorage.keys();\r\n    const schemaRecords = [];\r\n\r\n    for (const key of storageKeys) {\r\n      if (PoSchemaService.isSchemaKey(key, schemaName)) {\r\n        const id = PoSchemaService.getIdByRecordKey(key);\r\n        schemaRecords.push(await this.get(schemaName, id));\r\n      }\r\n    }\r\n\r\n    return schemaRecords;\r\n  }\r\n\r\n  /**\r\n   * Aguarda a liberação do recurso limitado, posteriormente o envolve em um comportamento\r\n   * de bloqueio e desbloqueio.\r\n   *\r\n   * @param {Function} limitedResource Função que será envolvida no comportamento de bloqueio e desbloqueio.\r\n   */\r\n  limitedCallWrap(limitedResource: Function): Promise<any> {\r\n    return this.poStorage.limitedCallWrap(limitedResource);\r\n  }\r\n\r\n  /**\r\n   * Remove um registro de um *schema* informado.\r\n   *\r\n   * @param {string} schemaName Nome do *schema*.\r\n   * @param {any} recordId Id do registro.\r\n   */\r\n  async remove(schemaName: string, recordId: any): Promise<any> {\r\n    const recordKey = PoSchemaService.getRecordKey(schemaName, recordId);\r\n    const localRecordKey = PoSchemaService.getRecordKey(schemaName, recordId, true);\r\n\r\n    await this.poStorage.remove(recordKey);\r\n    await this.poStorage.remove(localRecordKey);\r\n  }\r\n\r\n  /**\r\n   * Atualiza um registro de um *schema* informado.\r\n   *\r\n   * @param {PoSyncSchema} schema **Schema* referente ao registro que será alterado.\r\n   * @param {object} record Registro que será atualizado.\r\n   * @param {any} recordId Id do registro que deseja ser alterado. Deve ser utilizado em casos em que o id foi alterado.\r\n   */\r\n  async update(schema: PoSyncSchema, record: object, recordId?: any): Promise<object> {\r\n    const id = PoSchemaUtil.getRecordId(record, schema);\r\n\r\n    if (recordId) {\r\n      record = await this.updateRecordId(schema.name, record, recordId);\r\n    }\r\n\r\n    return this.save(schema, record, id);\r\n  }\r\n\r\n  /**\r\n   * Atualiza todos os registros de um *schema*.\r\n   *\r\n   * @param {PoSyncSchema} schema **Schema* referente aos registros que serão alterados.\r\n   * @param {Array<object>} records Lista de registros que serão alterados.\r\n   */\r\n  async updateAll(schema: PoSyncSchema, records: Array<object>): Promise<void> {\r\n    for (const record of records) {\r\n      await this.update(schema, record);\r\n    }\r\n  }\r\n\r\n  private async getRecord(schemaName, recordId, isLocalRecord = false): Promise<object> {\r\n    return (await this.poStorage.get(PoSchemaService.getRecordKey(schemaName, recordId, isLocalRecord))) || {};\r\n  }\r\n\r\n  private async save(schema: PoSyncSchema, record: object, recordId: any) {\r\n    const { serverRecord, localRecord } = PoSchemaUtil.separateSchemaFields(schema, record);\r\n    const recordKey = PoSchemaService.getRecordKey(schema.name, recordId);\r\n\r\n    await this.poStorage.set(recordKey, serverRecord);\r\n    await this.saveLocalFields(schema.name, localRecord, recordId);\r\n\r\n    return record;\r\n  }\r\n\r\n  private async saveLocalFields(schemaName: string, localFields: object, recordId): Promise<void> {\r\n    const containsLocalFields = Object.keys(localFields).length;\r\n\r\n    if (containsLocalFields) {\r\n      const localRecordKey = PoSchemaService.getRecordKey(schemaName, recordId, true);\r\n      await this.poStorage.set(localRecordKey, localFields);\r\n    }\r\n  }\r\n\r\n  private async updateRecordId(schemaName, record, recordId) {\r\n    const isLocalRecord = true;\r\n\r\n    const localRecord = await this.getRecord(schemaName, recordId, isLocalRecord);\r\n    await this.remove(schemaName, recordId);\r\n\r\n    return Object.assign(record, localRecord);\r\n  }\r\n}\r\n","import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { PoHttpHeaderOption } from './interfaces/po-http-header-option.interface';\r\nimport { PoHttpRequestData } from './interfaces/po-http-request-data.interface';\r\nimport { PoHttpRequestType } from './po-http-request-type.enum';\r\n\r\n/**\r\n * @docsPrivate\r\n *\r\n * @description\r\n *\r\n * Serviço para execução de requisições HTTP.\r\n */\r\n@Injectable()\r\nexport class PoHttpClientService {\r\n  constructor(private httpClient: HttpClient) {}\r\n\r\n  /**\r\n   * Constrói uma requisição HTTP personalizada.\r\n   *\r\n   * @param {PoHttpRequestData} poHttpOperationData Parâmetros para a construção\r\n   * da requisição.\r\n   */\r\n  createRequest(poHttpOperationData: PoHttpRequestData): Observable<HttpResponse<Object>> {\r\n    const httpHeaders = this.createHttpHeaders(poHttpOperationData.headers);\r\n\r\n    return this.httpClient.request(poHttpOperationData.method, poHttpOperationData.url, {\r\n      observe: 'response',\r\n      headers: httpHeaders,\r\n      body: poHttpOperationData.body\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Constrói uma requisição com o método `delete`.\r\n   *\r\n   * @param {string} url URL da requisição.\r\n   * @param {Array<PoHeaderOption>} httpHeaders Cabeçalhos da requisição.\r\n   */\r\n  delete(url: string, httpHeaders?: Array<PoHttpHeaderOption>) {\r\n    const requestData: PoHttpRequestData = {\r\n      url: url,\r\n      method: PoHttpRequestType.DELETE,\r\n      headers: httpHeaders\r\n    };\r\n    return this.createRequest(requestData);\r\n  }\r\n\r\n  /**\r\n   * Constrói uma requisição com o método `get`.\r\n   *\r\n   * @param {string} url URL da requisição.\r\n   * @param {Array<PoHeaderOption>} httpHeaders Cabeçalhos da requisição.\r\n   */\r\n  get(url: string, httpHeaders?: Array<PoHttpHeaderOption>) {\r\n    const requestData: PoHttpRequestData = {\r\n      url: url,\r\n      method: PoHttpRequestType.GET,\r\n      headers: httpHeaders\r\n    };\r\n    return this.createRequest(requestData);\r\n  }\r\n\r\n  /**\r\n   * Constrói uma requisição com o método `head`.\r\n   *\r\n   * @param {string} url URL da requisição.\r\n   * @param {Array<PoHeaderOption>} httpHeaders Cabeçalhos da requisição.\r\n   */\r\n  head(url: string, httpHeaders?: Array<PoHttpHeaderOption>) {\r\n    const requestData: PoHttpRequestData = {\r\n      url: url,\r\n      method: PoHttpRequestType.HEAD,\r\n      headers: httpHeaders\r\n    };\r\n    return this.createRequest(requestData);\r\n  }\r\n\r\n  /**\r\n   * Constrói uma requisição com o método `options`.\r\n   *\r\n   * @param {string} url URL da requisição.\r\n   * @param {Array<PoHeaderOption>} httpHeaders Cabeçalhos da requisição.\r\n   */\r\n  options(url: string, httpHeaders?: Array<PoHttpHeaderOption>) {\r\n    const requestData: PoHttpRequestData = {\r\n      url: url,\r\n      method: PoHttpRequestType.OPTIONS,\r\n      headers: httpHeaders\r\n    };\r\n    return this.createRequest(requestData);\r\n  }\r\n\r\n  /**\r\n   * Constrói uma requisição com o método `patch`.\r\n   *\r\n   * @param {string} url URL da requisição.\r\n   * @param {any} body Corpo da requisição.\r\n   * @param {Array<PoHeaderOption>} httpHeaders Cabeçalhos da requisição.\r\n   */\r\n  patch(url: string, body?: any, httpHeaders?: Array<PoHttpHeaderOption>) {\r\n    const requestData: PoHttpRequestData = {\r\n      url: url,\r\n      method: PoHttpRequestType.PATCH,\r\n      headers: httpHeaders,\r\n      body: body\r\n    };\r\n    return this.createRequest(requestData);\r\n  }\r\n\r\n  /**\r\n   * Constrói uma requisição com o método `post`.\r\n   *\r\n   * @param {string} url URL da requisição.\r\n   * @param {any} body Corpo da requisição.\r\n   * @param {Array<PoHeaderOption>} httpHeaders Cabeçalhos da requisição.\r\n   */\r\n  post(url: string, body?: any, httpHeaders?: Array<PoHttpHeaderOption>) {\r\n    const requestData: PoHttpRequestData = {\r\n      url: url,\r\n      method: PoHttpRequestType.POST,\r\n      headers: httpHeaders,\r\n      body: body\r\n    };\r\n    return this.createRequest(requestData);\r\n  }\r\n\r\n  /**\r\n   * Constrói uma requisição com o método `put`.\r\n   *\r\n   * @param {string} url URL da requisição.\r\n   * @param {any} body Corpo da requisição.\r\n   * @param {Array<PoHeaderOption>} httpHeaders Cabeçalhos da requisição.\r\n   */\r\n  put(url: string, body?: any, httpHeaders?: Array<PoHttpHeaderOption>) {\r\n    const requestData: PoHttpRequestData = {\r\n      url: url,\r\n      method: PoHttpRequestType.PUT,\r\n      headers: httpHeaders,\r\n      body: body\r\n    };\r\n\r\n    return this.createRequest(requestData);\r\n  }\r\n\r\n  private createHttpHeaders(poHttpOperationHeaders) {\r\n    let httpHeaders = new HttpHeaders();\r\n\r\n    if (poHttpOperationHeaders && poHttpOperationHeaders.length > 0) {\r\n      poHttpOperationHeaders.forEach(\r\n        poHttpHeader => (httpHeaders = httpHeaders.append(poHttpHeader.name, poHttpHeader.value))\r\n      );\r\n    }\r\n\r\n    return httpHeaders;\r\n  }\r\n}\r\n","import { HttpResponse, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { StatusCodes } from 'http-status-codes';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { expand, map, reduce } from 'rxjs/operators';\r\n\r\nimport { PoStorageService } from '@po-ui/ng-storage';\r\n\r\nimport { toBase64, toFile } from '../../utils/utils';\r\n\r\nimport { PoEventSourcingErrorResponse } from '../../models/po-event-sourcing-error-response.model';\r\nimport { PoEventSourcingItem } from './interfaces/po-event-sourcing-item.interface';\r\nimport { PoEventSourcingOperation } from './enums/po-event-sourcing-operation.enum';\r\nimport { PoEventSourcingSummaryItem } from './interfaces/po-event-sourcing-summary-item.interface';\r\nimport { PoHttpHeaderOption } from './../po-http-client/interfaces/po-http-header-option.interface';\r\nimport { PoHttpClientService } from './../po-http-client/po-http-client.service';\r\nimport { PoHttpRequestData } from '../po-http-client/interfaces/po-http-request-data.interface';\r\nimport { PoHttpRequestType } from '../po-http-client/po-http-request-type.enum';\r\nimport { PoRequestType } from '../../models/po-request-type.enum';\r\nimport { PoSchemaDefinitionService } from './../po-schema/po-schema-definition/po-schema-definition.service';\r\nimport { PoSchemaService } from './../po-schema/po-schema.service';\r\nimport { PoSchemaUtil } from './../po-schema/po-schema-util/po-schema-util.model';\r\nimport { PoSyncConfig } from '../po-sync/interfaces/po-sync-config.interface';\r\nimport { PoSyncResponse } from '../po-sync/interfaces/po-sync-response.interface';\r\nimport { PoSyncSchema } from './../po-sync/interfaces/po-sync-schema.interface';\r\n\r\n@Injectable()\r\nexport class PoEventSourcingService {\r\n  static readonly event_sourcing_name: string = 'EventSourcing';\r\n\r\n  private static readonly VALID_HTTP_STATUS_CODES = [\r\n    StatusCodes.OK, // 200\r\n    StatusCodes.CREATED, // 201\r\n    StatusCodes.ACCEPTED, // 202\r\n    StatusCodes.NON_AUTHORITATIVE_INFORMATION, // 203\r\n    StatusCodes.NO_CONTENT, // 204\r\n    StatusCodes.RESET_CONTENT, // 205\r\n    StatusCodes.PARTIAL_CONTENT, // 206\r\n    StatusCodes.MULTI_STATUS // 207\r\n  ];\r\n\r\n  config: PoSyncConfig;\r\n  stoppedQueueEventSourcing: boolean = false;\r\n\r\n  private emitter: any;\r\n  private eventSub: Observable<null>;\r\n  private responseSubject = new Subject<PoSyncResponse>();\r\n\r\n  private schemasSyncConfig = {};\r\n\r\n  constructor(\r\n    private poSchemaDefinition: PoSchemaDefinitionService,\r\n    private poSchemaService: PoSchemaService,\r\n    private poStorage: PoStorageService,\r\n    private poHttpClient: PoHttpClientService\r\n  ) {}\r\n\r\n  private static getUrl(eventSourcingItem, schema, requestType): string {\r\n    const schemaUrl = PoSchemaUtil.getUrl(schema, requestType);\r\n    const schemaId = eventSourcingItem.record[schema.idField];\r\n\r\n    if (requestType === PoRequestType.GET) {\r\n      return schemaUrl;\r\n    }\r\n\r\n    if ([PoRequestType.DELETE, PoRequestType.PATCH].includes(requestType)) {\r\n      return schemaUrl ? `${schemaUrl}/${schemaId}` : `${PoSchemaUtil.getUrl(schema, PoRequestType.GET)}/${schemaId}`;\r\n    }\r\n\r\n    if (requestType === PoRequestType.POST) {\r\n      return schemaUrl ? schemaUrl : PoSchemaUtil.getUrl(schema, PoRequestType.GET);\r\n    }\r\n  }\r\n\r\n  create(schemaName: string, newItem: any, customRequestId?: string): Promise<any> {\r\n    const eventSourcingItem = this.createEventSourcingItem(\r\n      PoEventSourcingOperation.Insert,\r\n      newItem,\r\n      schemaName,\r\n      customRequestId\r\n    );\r\n    return this.insertEventSourcingQueue(eventSourcingItem);\r\n  }\r\n\r\n  async createBatchEvents(schemaName: string, eventList: Array<PoEventSourcingSummaryItem>) {\r\n    const eventSourcingList = this.createEventSourcingList(schemaName, eventList);\r\n\r\n    await this.poStorage.appendArrayToArray(PoEventSourcingService.event_sourcing_name, eventSourcingList);\r\n\r\n    this.notifyEventCreation();\r\n  }\r\n\r\n  /**\r\n   * Destrói a chave do *storage* que contém a fila de dados que estão esperando para serem enviados ao\r\n   * servidor *(EventSourcing)*.\r\n   *\r\n   * @returns {Promise<void>} Promessa que é resolvida quando a chave referente a fila de *EventSourcing* for destruída.\r\n   */\r\n  destroyEventSourcingQueue(): Promise<void> {\r\n    return this.poStorage.remove(PoEventSourcingService.event_sourcing_name);\r\n  }\r\n\r\n  async httpCommand(httpOperationData: PoHttpRequestData, customRequestId?: string): Promise<number> {\r\n    httpOperationData = await this.serializeBody(httpOperationData);\r\n\r\n    const eventSourcingItem = this.createEventSourcingItem(\r\n      PoEventSourcingOperation.Http,\r\n      httpOperationData,\r\n      undefined,\r\n      customRequestId\r\n    );\r\n\r\n    await this.insertEventSourcingQueue(eventSourcingItem);\r\n    return eventSourcingItem.id;\r\n  }\r\n\r\n  responsesSubject(): Observable<PoSyncResponse> {\r\n    return this.responseSubject.asObservable();\r\n  }\r\n\r\n  onSaveData(): Observable<null> {\r\n    if (!this.eventSub) {\r\n      this.eventSub = Observable.create(subscriber => (this.emitter = subscriber));\r\n    }\r\n    return this.eventSub;\r\n  }\r\n\r\n  remove(schemaName: string, itemToDelete: any, customRequestId?: string): Promise<any> {\r\n    const eventSourcingItem = this.createEventSourcingItem(\r\n      PoEventSourcingOperation.Delete,\r\n      itemToDelete,\r\n      schemaName,\r\n      customRequestId\r\n    );\r\n    return this.insertEventSourcingQueue(eventSourcingItem);\r\n  }\r\n\r\n  removeEventSourcingItem(idEventSourcingItem) {\r\n    return this.poStorage.removeItemFromArray(PoEventSourcingService.event_sourcing_name, 'id', idEventSourcingItem);\r\n  }\r\n\r\n  syncGet(): Promise<any> {\r\n    const syncGetFunction = async () =>\r\n      this.poSchemaDefinition.getAll().then(schemas => {\r\n        const schemaPromises = this.updateStorageSchemas(schemas);\r\n\r\n        return Promise.all(schemaPromises);\r\n      });\r\n\r\n    return this.poSchemaService.limitedCallWrap(syncGetFunction);\r\n  }\r\n\r\n  async syncSend(): Promise<any> {\r\n    const syncSendFunction = async (): Promise<any> => {\r\n      const itemOfQueue = await this.poStorage.getFirstItem(PoEventSourcingService.event_sourcing_name);\r\n\r\n      if (itemOfQueue) {\r\n        await this.selectOperation(itemOfQueue);\r\n      }\r\n\r\n      if (this.stoppedQueueEventSourcing || !itemOfQueue) {\r\n        this.stoppedQueueEventSourcing = false;\r\n        return Promise.resolve();\r\n      }\r\n\r\n      return syncSendFunction();\r\n    };\r\n\r\n    return this.poSchemaService.limitedCallWrap(syncSendFunction);\r\n  }\r\n\r\n  update(schemaName: string, itemUpdated: any, customRequestId?: string): Promise<any> {\r\n    const eventSourcingItem = this.createEventSourcingItem(\r\n      PoEventSourcingOperation.Update,\r\n      itemUpdated,\r\n      schemaName,\r\n      customRequestId\r\n    );\r\n    return this.insertEventSourcingQueue(eventSourcingItem);\r\n  }\r\n\r\n  /* Avalia se o body é do tipo File e se for converte para base64 */\r\n  private async serializeBody(requestData: PoHttpRequestData): Promise<PoHttpRequestData> {\r\n    let { body, mimeType, bodyType, fileName } = requestData;\r\n\r\n    if (body instanceof File) {\r\n      bodyType = 'File';\r\n      mimeType = body.type;\r\n      fileName = body.name;\r\n      body = await toBase64(body);\r\n    }\r\n\r\n    return { ...requestData, body, mimeType, bodyType, fileName };\r\n  }\r\n\r\n  private buildUrlParams(schema: PoSyncSchema, baseUrl: string, pageNumber: number): string {\r\n    const params = [];\r\n    params.push(`${this.config.dataTransform.getPageSizeParamName()}=${schema.pageSize}`);\r\n    params.push(`${this.config.dataTransform.getPageParamName()}=${pageNumber}`);\r\n    return `${baseUrl}?${params.join('&')}`;\r\n  }\r\n\r\n  private checkRecordIdExists(recordId, operation) {\r\n    if (!recordId) {\r\n      const error = {\r\n        message: 'Identifier not defined',\r\n        operation: operation\r\n      };\r\n\r\n      throw new PoEventSourcingErrorResponse(error);\r\n    }\r\n  }\r\n\r\n  private concatPageItems(pageAcumulator, requestBody): { entity: string; data: Array<any> } {\r\n    if (requestBody[this.config.dataTransform.getItemsFieldName()]) {\r\n      pageAcumulator.data = [...pageAcumulator.data, ...requestBody[this.config.dataTransform.getItemsFieldName()]];\r\n    }\r\n    return pageAcumulator;\r\n  }\r\n\r\n  private createEventSourcingItem(\r\n    operation: PoEventSourcingOperation,\r\n    newItem: any | PoHttpRequestData,\r\n    schemaName?: string,\r\n    customRequestId?: string,\r\n    id?: number\r\n  ): PoEventSourcingItem {\r\n    if (!schemaName && operation !== PoEventSourcingOperation.Http) {\r\n      throw new Error('PoSyncSchema is not defined.');\r\n    }\r\n\r\n    return {\r\n      id: id ? id : new Date().getTime(),\r\n      dateTime: new Date().getTime(),\r\n      schema: schemaName,\r\n      operation: operation,\r\n      record: newItem,\r\n      customRequestId: customRequestId\r\n    };\r\n  }\r\n\r\n  private createEventSourcingList(\r\n    schemaName: string,\r\n    eventList: Array<PoEventSourcingSummaryItem>\r\n  ): Array<PoEventSourcingItem> {\r\n    return eventList.map((eventItem, index) => {\r\n      const id = new Date().getTime() + index;\r\n\r\n      return this.createEventSourcingItem(\r\n        eventItem.operation,\r\n        eventItem.record,\r\n        schemaName,\r\n        eventItem.customRequestId,\r\n        id\r\n      );\r\n    });\r\n  }\r\n\r\n  private createSchemaSyncConfig(schemaName) {\r\n    this.schemasSyncConfig[schemaName] = {\r\n      page: undefined,\r\n      currentUrlDiff: undefined,\r\n      responseDate: undefined\r\n    };\r\n  }\r\n\r\n  private async deleteOperation(eventSourcingItem: PoEventSourcingItem): Promise<any> {\r\n    try {\r\n      const schema = await this.poSchemaDefinition.get(eventSourcingItem.schema);\r\n\r\n      const recordId = eventSourcingItem.record[schema.idField];\r\n      this.checkRecordIdExists(recordId, PoEventSourcingOperation.Delete);\r\n\r\n      const url = PoEventSourcingService.getUrl(eventSourcingItem, schema, PoRequestType.DELETE);\r\n      const response = await this.sendServerItem(url, PoHttpRequestType.DELETE);\r\n\r\n      await this.removeEventSourcingValidItem(response.status, eventSourcingItem);\r\n\r\n      return await this.sendResponseSubject(eventSourcingItem, response);\r\n    } catch (errorResponse) {\r\n      return this.sendResponseSubject(eventSourcingItem, errorResponse, true);\r\n    }\r\n  }\r\n\r\n  private diffServerItems(currentUrlDiff): Observable<HttpResponse<Object>> {\r\n    return this.poHttpClient.get(currentUrlDiff);\r\n  }\r\n\r\n  private getBodyAndDate(schemaName, response): any {\r\n    const getDateFieldName = this.config.dataTransform.getDateFieldName();\r\n\r\n    const responseSyncDate = response.body[getDateFieldName];\r\n\r\n    this.schemasSyncConfig[schemaName]['responseDate'] = responseSyncDate;\r\n    return response.body;\r\n  }\r\n\r\n  private async getServerDiffRecords(schema: PoSyncSchema, baseUrl: string): Promise<any> {\r\n    const initialAcumulatorPage = { entity: schema.name, data: [] };\r\n    const diffUrl = this.schemasSyncConfig[schema.name]['currentUrlDiff'];\r\n\r\n    const serverResponse = await this.diffServerItems(diffUrl)\r\n      .pipe(\r\n        map(response => this.getBodyAndDate(schema.name, response)),\r\n        expand(data => this.paginateSchemaData(data, schema, baseUrl)),\r\n        reduce(\r\n          (pageAcumulator, requestBody) => this.concatPageItems(pageAcumulator, requestBody),\r\n          initialAcumulatorPage\r\n        )\r\n      )\r\n      .toPromise();\r\n\r\n    return serverResponse.data;\r\n  }\r\n\r\n  private async httpOperation(eventSourcingItem: PoEventSourcingItem): Promise<Array<PoEventSourcingItem> | number> {\r\n    try {\r\n      const requestData: PoHttpRequestData = await this.createPoHttpRequestData(\r\n        eventSourcingItem.record.url,\r\n        eventSourcingItem.record.method,\r\n        eventSourcingItem.record,\r\n        eventSourcingItem.record.headers\r\n      );\r\n      const response = await this.poHttpClient.createRequest(requestData).toPromise();\r\n      const poHttpCommandResponse: PoSyncResponse = {\r\n        id: eventSourcingItem.id,\r\n        customRequestId: eventSourcingItem.customRequestId,\r\n        request: eventSourcingItem.record,\r\n        response: response\r\n      };\r\n\r\n      this.responseSubject.next(poHttpCommandResponse);\r\n\r\n      return this.removeEventSourcingValidItem(response.status, eventSourcingItem);\r\n    } catch (errorHttpClient) {\r\n      return this.sendResponseSubject(eventSourcingItem, errorHttpClient, true);\r\n    }\r\n  }\r\n\r\n  private async insertEventSourcingQueue(eventSourcingItem): Promise<Array<PoEventSourcingItem>> {\r\n    const eventSourcingUpdatedQueue = await this.poStorage.appendItemToArray(\r\n      PoEventSourcingService.event_sourcing_name,\r\n      eventSourcingItem\r\n    );\r\n\r\n    this.notifyEventCreation();\r\n\r\n    return Promise.resolve(eventSourcingUpdatedQueue);\r\n  }\r\n\r\n  private async insertOperation(currentEventSourcingItem: PoEventSourcingItem): Promise<any> {\r\n    const schema = await this.poSchemaDefinition.get(currentEventSourcingItem.schema);\r\n    const url = PoEventSourcingService.getUrl(currentEventSourcingItem, schema, PoRequestType.POST);\r\n\r\n    try {\r\n      const response = await this.sendServerItem(url, PoHttpRequestType.POST, currentEventSourcingItem.record);\r\n      const recordUpdatedByServer = response.body;\r\n\r\n      await this.removeEventSourcingValidItem(response.status, currentEventSourcingItem);\r\n\r\n      const id = currentEventSourcingItem.record[PoSchemaUtil.syncInternalIdFieldName];\r\n      await this.poSchemaService.update(schema, recordUpdatedByServer, id);\r\n\r\n      const eventSourcingItems: Array<PoEventSourcingItem> = await this.poStorage.get(\r\n        PoEventSourcingService.event_sourcing_name\r\n      );\r\n      await this.updatePendingEventSourcing(\r\n        currentEventSourcingItem,\r\n        schema.idField,\r\n        recordUpdatedByServer,\r\n        eventSourcingItems\r\n      );\r\n\r\n      return this.sendResponseSubject(currentEventSourcingItem, response);\r\n    } catch (errorHttpClient) {\r\n      return this.sendResponseSubject(currentEventSourcingItem, errorHttpClient, true);\r\n    }\r\n  }\r\n\r\n  private isValidStatus(status: number): boolean {\r\n    return PoEventSourcingService.VALID_HTTP_STATUS_CODES.includes(status);\r\n  }\r\n\r\n  private notifyEventCreation(): void {\r\n    if (this.emitter) {\r\n      this.emitter.next();\r\n    }\r\n  }\r\n\r\n  private paginateSchemaData(data, schema, baseUrl): Observable<null> {\r\n    this.config.dataTransform.transform(data);\r\n\r\n    if (this.config.dataTransform.hasNext()) {\r\n      this.schemasSyncConfig[schema.name]['currentUrlDiff'] = this.buildUrlParams(\r\n        schema,\r\n        baseUrl,\r\n        ++this.schemasSyncConfig[schema.name]['page']\r\n      );\r\n\r\n      return this.diffServerItems(this.schemasSyncConfig[schema.name]['currentUrlDiff']).pipe(\r\n        map(response => this.getBodyAndDate(schema.name, response))\r\n      );\r\n    }\r\n\r\n    return of();\r\n  }\r\n\r\n  private removeEventSourcingValidItem(\r\n    status,\r\n    eventSourcingItem: PoEventSourcingItem\r\n  ): Promise<Array<PoEventSourcingItem>> {\r\n    if (this.isValidStatus(status) || eventSourcingItem.operation === PoEventSourcingOperation.Http) {\r\n      return this.removeEventSourcingItem(eventSourcingItem.id);\r\n    }\r\n  }\r\n\r\n  private selectOperation(eventSourcingItem: PoEventSourcingItem): Promise<any> {\r\n    switch (eventSourcingItem.operation) {\r\n      case PoEventSourcingOperation.Insert:\r\n        return this.insertOperation(eventSourcingItem);\r\n\r\n      case PoEventSourcingOperation.Update:\r\n        return this.updateOperation(eventSourcingItem);\r\n\r\n      case PoEventSourcingOperation.Delete:\r\n        return this.deleteOperation(eventSourcingItem);\r\n\r\n      case PoEventSourcingOperation.Http:\r\n        return this.httpOperation(eventSourcingItem);\r\n    }\r\n  }\r\n\r\n  private sendResponseSubject(\r\n    eventSourcingItem: PoEventSourcingItem,\r\n    response: HttpResponse<Object> | HttpErrorResponse | PoEventSourcingErrorResponse,\r\n    isSubjectError: boolean = false\r\n  ): Promise<any> {\r\n    const poSyncResponse: PoSyncResponse = {\r\n      id: eventSourcingItem.id,\r\n      customRequestId: eventSourcingItem.customRequestId,\r\n      request: eventSourcingItem.record,\r\n      response: response\r\n    };\r\n\r\n    this.stoppedQueueEventSourcing = isSubjectError;\r\n    this.responseSubject.next(poSyncResponse);\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  private async sendServerItem(url: string, method: PoHttpRequestType, body?: PoEventSourcingItem['record']) {\r\n    const requestData: PoHttpRequestData = await this.createPoHttpRequestData(url, method, body);\r\n\r\n    return this.poHttpClient.createRequest(requestData).toPromise();\r\n  }\r\n\r\n  private async createPoHttpRequestData(\r\n    url: string,\r\n    method: PoHttpRequestType,\r\n    record?: PoEventSourcingItem['record'],\r\n    headers?: Array<PoHttpHeaderOption>\r\n  ): Promise<PoHttpRequestData> {\r\n    let body = record.body ?? record;\r\n\r\n    if (record.bodyType === 'File') {\r\n      body = await this.createFormData(body, record.fileName, record.mimeType, record.formField);\r\n    }\r\n\r\n    return { url, method, body, headers };\r\n  }\r\n\r\n  private async createFormData(\r\n    body: string,\r\n    fileName: string,\r\n    mimeType: string,\r\n    formField: string = 'file'\r\n  ): Promise<FormData> {\r\n    const file = await toFile(body, fileName, mimeType);\r\n    const formData: FormData = new FormData();\r\n\r\n    formData.append(formField, file, fileName);\r\n    return formData;\r\n  }\r\n\r\n  private async updateOperation(eventSourcingItem: PoEventSourcingItem): Promise<Array<any> | number> {\r\n    const schema = await this.poSchemaDefinition.get(eventSourcingItem.schema);\r\n    const url = PoEventSourcingService.getUrl(eventSourcingItem, schema, PoRequestType.PATCH);\r\n\r\n    try {\r\n      const recordId = eventSourcingItem.record[schema.idField];\r\n      this.checkRecordIdExists(recordId, PoEventSourcingOperation.Update);\r\n\r\n      const response = await this.sendServerItem(url, PoHttpRequestType.PUT, eventSourcingItem.record);\r\n      await this.removeEventSourcingValidItem(response.status, eventSourcingItem);\r\n\r\n      return await this.sendResponseSubject(eventSourcingItem, response);\r\n    } catch (errorHttpClient) {\r\n      return this.sendResponseSubject(eventSourcingItem, errorHttpClient, true);\r\n    }\r\n  }\r\n\r\n  private updatePendingEventSourcing(\r\n    currentEventSourcingItem: PoEventSourcingItem,\r\n    idFieldSchema: string,\r\n    inserted: object,\r\n    eventSourcingItems: Array<PoEventSourcingItem>\r\n  ) {\r\n    if (currentEventSourcingItem.record[PoSchemaUtil.syncInternalIdFieldName]) {\r\n      eventSourcingItems.forEach((eventSourcingItem, position) => {\r\n        const isCurrentEventSourcingItem =\r\n          !eventSourcingItem.record[idFieldSchema] &&\r\n          eventSourcingItem.record[PoSchemaUtil.syncInternalIdFieldName] ===\r\n            currentEventSourcingItem.record[PoSchemaUtil.syncInternalIdFieldName];\r\n\r\n        if (isCurrentEventSourcingItem) {\r\n          eventSourcingItems[position].record[idFieldSchema] = inserted[idFieldSchema];\r\n        }\r\n      });\r\n\r\n      return this.poStorage.set(PoEventSourcingService.event_sourcing_name, eventSourcingItems);\r\n    } else {\r\n      return Promise.resolve();\r\n    }\r\n  }\r\n\r\n  private async updateRecords(serverRecords: Array<any>, schema: PoSyncSchema) {\r\n    for (const serverRecord of serverRecords) {\r\n      await this.updateRecordByServerRecord(serverRecord, schema);\r\n    }\r\n  }\r\n\r\n  private async updateRecordByServerRecord(serverRecord, schema) {\r\n    const recordId = serverRecord[schema.idField];\r\n    const storageRecord = await this.poSchemaService.get(schema.name, recordId);\r\n    const existsStorageRecord = !!Object.keys(storageRecord).length;\r\n\r\n    if (existsStorageRecord && serverRecord[schema.deletedField]) {\r\n      return await this.poSchemaService.remove(schema.name, serverRecord[schema.idField]);\r\n    }\r\n\r\n    if (existsStorageRecord && !serverRecord[schema.deletedField]) {\r\n      return await this.poSchemaService.update(schema, serverRecord);\r\n    }\r\n\r\n    if (!existsStorageRecord && !serverRecord[schema.deletedField]) {\r\n      return await this.poSchemaService.create(schema, serverRecord);\r\n    }\r\n  }\r\n\r\n  private async updateStorageBySchema(schema: PoSyncSchema): Promise<any> {\r\n    this.createSchemaSyncConfig(schema.name);\r\n\r\n    this.schemasSyncConfig[schema.name]['page'] = 1;\r\n    const baseUrl = `${PoSchemaUtil.getUrl(schema, PoRequestType.DIFF)}/${schema.lastSync}`;\r\n    this.schemasSyncConfig[schema.name]['currentUrlDiff'] = this.buildUrlParams(\r\n      schema,\r\n      baseUrl,\r\n      this.schemasSyncConfig[schema.name]['page']\r\n    );\r\n\r\n    const serverRecords = await this.getServerDiffRecords(schema, baseUrl);\r\n\r\n    await this.updateRecords(serverRecords, schema);\r\n\r\n    schema.lastSync = this.schemasSyncConfig[schema.name]['responseDate'];\r\n    await this.poSchemaDefinition.update(schema);\r\n  }\r\n\r\n  private updateStorageSchemas(schemas): Array<Promise<Array<any>>> {\r\n    return schemas.map((schema: PoSyncSchema) => this.updateStorageBySchema(schema));\r\n  }\r\n}\r\n","import { validateParameter } from '../../utils/utils';\r\n\r\nimport { PoResponseApi } from './../../services/po-http-client/interfaces/po-response-api.interface';\r\nimport { PoSchemaService } from './../../services/po-schema';\r\nimport { PoSyncSchema } from '../../services/po-sync/interfaces/po-sync-schema.interface';\r\n\r\n/**\r\n * @description\r\n *\r\n * Classe utilitária para construir consultas sobre os registros de um *schema*.\r\n *\r\n * A utilização dos métodos desta classe é feita a partir do retorno do método `PoEntity.find()`. Por exemplo,\r\n * para utilizar o método `PoQueryBuilder.page()`, é necessário:\r\n *\r\n * ``` typescript\r\n * PoSyncService.getModel('schema name').find().page(2).exec();\r\n * ```\r\n *\r\n * O `PoQueryBuilder` foi projetado para que os seus métodos sejam\r\n * chamados em cascata e ao final desse encadeamento invocar o método\r\n * `PoQueryBuilder.exec()` para que a busca seja concluída. Por exemplo:\r\n *\r\n * ``` typescript\r\n * PoSyncService\r\n *   .getModel('schema name')\r\n *   .find()\r\n *   .page(2)\r\n *   .pageSize(5)\r\n *   .sort()\r\n *   .exec();\r\n * ```\r\n */\r\nexport class PoQueryBuilder {\r\n  private fields: string;\r\n  private filters: any;\r\n\r\n  private _limit: number;\r\n  private _page: number;\r\n  private _pageSize: number;\r\n  private _sort: string;\r\n\r\n  constructor(private poSchemaService: PoSchemaService, private schema: PoSyncSchema) {\r\n    this._page = 1;\r\n    this.filters = {};\r\n  }\r\n\r\n  /**\r\n   * Ao final da chamada dos métodos do `PoQueryBuilder` utilizados, este método deve ser chamado para que a busca seja concluída.\r\n   *\r\n   * @return {Promise<PoResponseApi | object>} Registros do *schema* na qual foi aplicado a consulta.\r\n   */\r\n  async exec(): Promise<PoResponseApi | object> {\r\n    let storageData = await this.poSchemaService.getAll(this.schema.name);\r\n\r\n    if (storageData && storageData.length) {\r\n      if (Object.keys(this.filters).length) {\r\n        storageData = this.applyFilters(storageData);\r\n      }\r\n      if (this.fields) {\r\n        storageData = this.applyFields(this.schema.fields, storageData);\r\n      }\r\n      if (this._sort) {\r\n        storageData = this.order(storageData, this._sort);\r\n      }\r\n\r\n      if (this._limit) {\r\n        return storageData[0];\r\n      } else {\r\n        return this.paginate(storageData);\r\n      }\r\n    } else {\r\n      return {\r\n        hasNext: false,\r\n        items: []\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Aplica filtros sobre os registros, baseados nos campos e valores definidos como filtro. Por exemplo:\r\n   *\r\n   * ```\r\n   * PoQueryBuilder.filter({ name: 'Marie', age: 24 });\r\n   * ```\r\n   * Retorna todos os registros que contenham a propriedade `name` igual a Marie e `age` igual a 24.\r\n   *\r\n   * @param {object} filter Objeto que contém os campos e valores a serem filtrados no *schema*.\r\n   *\r\n   * @returns {PoQueryBuilder} Objeto que possibilita encadear um novo método do `PoQueryBuilder`.\r\n   */\r\n  filter(filter?: object): PoQueryBuilder {\r\n    if (filter && typeof filter === 'object') {\r\n      this.filters = { ...this.filters, ...filter };\r\n    } else {\r\n      throw new Error('Filter must be an object');\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Limita o número de registros que serão retornados.\r\n   *\r\n   * @param {number} limit Número de registros retornados.\r\n   * @returns {PoQueryBuilder} Objeto que possibilita encadear um novo método do `PoQueryBuilder`.\r\n   */\r\n  limit(limit: number): PoQueryBuilder {\r\n    this._limit = limit;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Especifica a página de registros que se deseja retornar.\r\n   *\r\n   * @param {number} page Número da página.\r\n   * @returns {PoQueryBuilder} Objeto que possibilita encadear um novo método do `PoQueryBuilder`.\r\n   */\r\n  page(page: number): PoQueryBuilder {\r\n    validateParameter({ page });\r\n\r\n    this._page = page;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Define quantos elementos serão retornados por página.\r\n   *\r\n   * @param {number} pageSize Número de registros por página.\r\n   * @returns {PoQueryBuilder} Objeto que possibilita encadear um novo método do `PoQueryBuilder`.\r\n   */\r\n  pageSize(pageSize: number): PoQueryBuilder {\r\n    validateParameter({ pageSize });\r\n\r\n    this._pageSize = pageSize;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Utilizado para definir quais campos do *schema* serão retornados na consulta.\r\n   *\r\n   * @param {string} fields Campos que serão retornados nos registros. Este campos devem estar dentro de\r\n   * uma *string* separados por espaço podendo usar o caractere `-` para excluir campos.\r\n   * Por exemplo, a definição abaixo:\r\n   *\r\n   * ```\r\n   * PoQueryBuilder.select('name age address');\r\n   * ```\r\n   * Irá retornar apenas os campos `name`, `age` e `address`. Para não retornar um campo ou mais basta fazer:\r\n   *\r\n   * ```\r\n   * PoQueryBuilder.select('-name -age');\r\n   * ```\r\n   *\r\n   * @returns {PoQueryBuilder} Objeto que possibilita encadear um novo método do `PoQueryBuilder`.\r\n   */\r\n  select(fields: string): PoQueryBuilder {\r\n    validateParameter({ fields });\r\n\r\n    this.fields = fields;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Ordena os registros por um campo.\r\n   *\r\n   * @param {string} field Campo a ser ordenado. Para ordenar de forma decrescente basta colocar o caractere `-`\r\n   * na frente do campo. Por exemplo:\r\n   * ```\r\n   * PoQueryBuilder.sort('-name');\r\n   * ```\r\n   *\r\n   * @returns {PoQueryBuilder} Objeto que possibilita encadear um novo método do `PoQueryBuilder`.\r\n   */\r\n  sort(field: string): PoQueryBuilder {\r\n    validateParameter({ field });\r\n\r\n    this._sort = field;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Essa função serve como alias para o `PoQueryBuilder.filter()`. É utilizada somente para dar maior legibilidade ao código.\r\n   *\r\n   * @param {object} filter Objeto que contém os campos e valores a serem filtrados no *schema*.\r\n   * @returns {PoQueryBuilder} Objeto que possibilita encadear um novo método do `PoQueryBuilder`.\r\n   */\r\n  where(filter: object): PoQueryBuilder {\r\n    return this.filter(filter);\r\n  }\r\n\r\n  private applyFields(schemaFields: Array<any>, data: Array<object>): Array<object> {\r\n    const receivedFields = this.fields.split(' ');\r\n    let restrictedFields = [];\r\n    let selectedFields = [];\r\n\r\n    [selectedFields, restrictedFields] = this.groupFields(receivedFields);\r\n\r\n    if (!selectedFields.length && restrictedFields.length) {\r\n      selectedFields = [...schemaFields];\r\n    }\r\n\r\n    if (restrictedFields.length) {\r\n      selectedFields = this.removeRestrictedFields(restrictedFields, selectedFields);\r\n    }\r\n\r\n    selectedFields = this.removeDuplicate(selectedFields);\r\n\r\n    return this.removeFieldsData(data, selectedFields);\r\n  }\r\n\r\n  private applyFilters(data: Array<object>): Array<object> {\r\n    Object.keys(this.filters).forEach(filterKey => {\r\n      data = data.filter(item => item[filterKey] === this.filters[filterKey]);\r\n    });\r\n\r\n    return data;\r\n  }\r\n\r\n  private groupFields(receivedFields: Array<string>): Array<Array<string>> {\r\n    const restrictedFields = [];\r\n    const selectedFields = [];\r\n\r\n    receivedFields.forEach(fields => {\r\n      if (fields.startsWith('-')) {\r\n        restrictedFields.push(fields.substring(1));\r\n      } else {\r\n        selectedFields.push(fields);\r\n      }\r\n    });\r\n    return [selectedFields, restrictedFields];\r\n  }\r\n\r\n  private paginate(data: Array<any>): { hasNext: boolean; items: Array<any> } {\r\n    const dataLength = data.length;\r\n    const pageSize = this._pageSize || dataLength;\r\n\r\n    const pages = Math.ceil(dataLength / pageSize);\r\n    const begin = this._page * pageSize - pageSize;\r\n    const end = begin + pageSize;\r\n\r\n    return { hasNext: this._page < pages, items: data.slice(begin, end) };\r\n  }\r\n\r\n  private order(data: Array<any>, sortingField: string): Array<any> {\r\n    const descendingOrder = sortingField.startsWith('-');\r\n    sortingField = descendingOrder ? sortingField.substr(1) : sortingField;\r\n\r\n    return data.sort((optionA, optionB) => {\r\n      if (optionA[sortingField] > optionB[sortingField]) {\r\n        return !descendingOrder ? 1 : -1;\r\n      }\r\n\r\n      if (optionA[sortingField] < optionB[sortingField]) {\r\n        return !descendingOrder ? -1 : 1;\r\n      }\r\n\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  private removeDuplicate(fields): Array<any> {\r\n    return fields.filter((item, position) => fields.indexOf(item) === position);\r\n  }\r\n\r\n  private removeFieldsData(data: Array<object>, chosenFields: Array<string>): Array<object> {\r\n    data.forEach(item => {\r\n      Object.keys(item).forEach(keyItem => {\r\n        if (!chosenFields.includes(keyItem)) {\r\n          delete item[keyItem];\r\n        }\r\n      });\r\n    });\r\n    return data;\r\n  }\r\n\r\n  private removeRestrictedFields(restrictedFields: Array<any>, fields: Array<any>) {\r\n    return fields.filter(field => !restrictedFields.includes(field));\r\n  }\r\n}\r\n","import { validateParameter } from '../../utils/utils';\r\n\r\nimport {\r\n  PoEventSourcingOperation,\r\n  PoEventSourcingService,\r\n  PoEventSourcingSummaryItem\r\n} from '../../services/po-event-sourcing';\r\nimport { PoQueryBuilder } from './../po-query-builder/po-query-builder.model';\r\nimport { PoSchemaService, PoSchemaUtil } from '../../services/po-schema';\r\nimport { PoSyncSchema } from '../../services/po-sync/interfaces/po-sync-schema.interface';\r\n\r\n/**\r\n * @description\r\n *\r\n * Uma instância `PoEntity` representa um *schema* e ela contém métodos que possibilitam manipular seus registros,\r\n * como por exemplo: buscar, criar e remover.\r\n *\r\n * Esta instância pode ser obtida a partir do retorno do método `PoSyncService.getModel('schema name')`.\r\n */\r\nexport class PoEntity {\r\n  constructor(\r\n    private eventSourcing: PoEventSourcingService,\r\n    private schema: PoSyncSchema,\r\n    private poSchemaService: PoSchemaService\r\n  ) {}\r\n\r\n  /**\r\n   * Busca os registros do *schema*, podendo filtrar o resultado a partir do filtro passado e retornando apenas\r\n   * os campos definidos.\r\n   *\r\n   * Para que esta busca seja concluída é necessário utilizar o método `PoQueryBuilder.exec()`.\r\n   * Veja mais em: [PoQueryBuilder](/documentation/po-query-builder).\r\n   *\r\n   * @param {object} filter Objeto que contém os campos e valores a serem filtrados no *schema*.\r\n   * @param {string} fields Campos que serão retornados nos registros. Este campos devem estar dentro de\r\n   * uma *string* separados por espaço podendo usar o caractere `-` para excluir campos.\r\n   * Por exemplo, a definição abaixo:\r\n   *\r\n   * ```\r\n   * PoQueryBuilder.select('name age address');\r\n   * ```\r\n   * Irá retornar apenas os campos `name`, `age` e `address`. E para não mostrar um campo ou mais basta fazer:\r\n   *\r\n   * ```\r\n   * PoQueryBuilder.select('-name -age');\r\n   * ```\r\n   * @returns {PoQueryBuilder} Objeto que possibilita encadear um método do `PoQueryBuilder`.\r\n   */\r\n  find(filter?: object, fields?: string): PoQueryBuilder {\r\n    const query = new PoQueryBuilder(this.poSchemaService, this.schema);\r\n\r\n    if (filter) {\r\n      query.filter(filter);\r\n    }\r\n\r\n    if (fields) {\r\n      query.select(fields);\r\n    }\r\n\r\n    return query;\r\n  }\r\n\r\n  /**\r\n   * Busca um registro pelo seu *id*.\r\n   *\r\n   * Para que esta busca seja concluída é necessário utilizar o método `PoQueryBuilder.exec()`.\r\n   * Veja mais em: [PoQueryBuilder](/documentation/po-query-builder).\r\n   *\r\n   * @param {any} id Identificador do registro.\r\n   * @param {string} fields Campos que serão retornados nos registros. Este campos devem estar dentro de\r\n   * uma *string* separados por espaço podendo usar o caractere `-` para excluir campos.\r\n   * Por exemplo, a definição abaixo:\r\n   *\r\n   * ```\r\n   * PoQueryBuilder.select('name age address');\r\n   * ```\r\n   * Irá retornar apenas os campos `name`, `age` e `address`. E para não mostrar um campo ou mais basta fazer:\r\n   *\r\n   * ```\r\n   * PoQueryBuilder.select('-name -age');\r\n   * ```\r\n   * @returns {PoQueryBuilder} Objeto que possibilita encadear um método do `PoQueryBuilder`.\r\n   */\r\n  findById(id: any, fields?: string): PoQueryBuilder {\r\n    return this.findOne({ [this.schema.idField]: id }, fields);\r\n  }\r\n\r\n  /**\r\n   * Semelhante ao método `PoEntity.find()`, porém retorna apenas o primeiro registro encontrado na busca.\r\n   *\r\n   * Para que esta busca seja concluída é necessário utilizar o método `PoQueryBuilder.exec()`.\r\n   * Veja mais em: [PoQueryBuilder](/documentation/po-query-builder).\r\n   *\r\n   * @param {any} filter Objeto que contém os campos e valores a serem filtrados no *schema*.\r\n   * @param {string} fields Campos que serão retornados nos registros. Este campos devem estar dentro de\r\n   * uma *string* separados por espaço podendo usar o caractere `-` para excluir campos.\r\n   * Por exemplo, a definição abaixo:\r\n   *\r\n   * ```\r\n   * PoQueryBuilder.select('name age address');\r\n   * ```\r\n   * Irá retornar apenas os campos `name`, `age` e `address`. E para não mostrar um campo ou mais basta fazer:\r\n   *\r\n   * ```\r\n   * PoQueryBuilder.select('-name -age');\r\n   * ```\r\n   * @returns {PoQueryBuilder} Objeto que possibilita encadear um método do `PoQueryBuilder`.\r\n   */\r\n  findOne(filter?: any, fields?: string): PoQueryBuilder {\r\n    const query = this.find(filter, fields);\r\n    query.limit(1);\r\n    return query;\r\n  }\r\n\r\n  /**\r\n   * Remove um registro.\r\n   *\r\n   * @param {object} record Registro que será removido.\r\n   * @param {string} customRequestId Identificador customizado do comando.\r\n   * @returns {Promise} Promessa que é concluída após o registro ser removido.\r\n   */\r\n  async remove(record: object, customRequestId?: string): Promise<any> {\r\n    validateParameter({ record });\r\n\r\n    const remove = async () => {\r\n      const idField = record[this.schema.idField] ? this.schema.idField : PoSchemaUtil.syncInternalIdFieldName;\r\n      const serverRecord = PoSchemaUtil.separateSchemaFields(this.schema, record)['serverRecord'];\r\n\r\n      await this.poSchemaService.remove(this.schema.name, record[idField]);\r\n      await this.eventSourcing.remove(this.schema.name, serverRecord, customRequestId);\r\n    };\r\n\r\n    return this.poSchemaService.limitedCallWrap(remove);\r\n  }\r\n\r\n  /**\r\n   * Altera ou inclui um registro.\r\n   *\r\n   * > O registro será alterado se ele possuir um *id*, caso contrário um novo registro será criado.\r\n   *\r\n   * @param {object} record Registro que será persistido.\r\n   * @param {string} customRequestId Identificador customizado do comando.\r\n   * @returns {Promise} Promessa que é concluída após o registro ser alterado ou incluído.\r\n   */\r\n  async save(record: object, customRequestId?: string): Promise<any> {\r\n    validateParameter({ record });\r\n\r\n    return this.poSchemaService.limitedCallWrap(this.selectSaveType.bind(this, record, true, customRequestId));\r\n  }\r\n\r\n  /**\r\n   * Salva uma lista de registros em lote.\r\n   *\r\n   * > Para cada registro da lista, será inserido um novo registro se o mesmo não tiver *id*, caso contrário\r\n   * será contado como uma atualização de um registro existente.\r\n   *\r\n   * @param {Array<object>} records Lista de registros que serão persistidos.\r\n   * @param {Array<string> | string} customRequestIds Identificador customizado do comando.\r\n   *\r\n   * Ao passar uma lista de identificadores, cada índice da lista de identificadores deverá\r\n   * corresponder ao índice do registro na lista de registros.\r\n   * @returns {Promise<any>} Promessa que é concluída após os registros serem alterados ou incluídos.\r\n   */\r\n  async saveAll(records: Array<object>, customRequestIds?: Array<string> | string): Promise<any> {\r\n    validateParameter({ records });\r\n\r\n    const saveAll = async () => {\r\n      const batchEvents = [];\r\n\r\n      for (let index = 0; index < records.length; index++) {\r\n        const record = records[index];\r\n        const sendToEventSourcing = false;\r\n\r\n        const isNonLocalRecordChanged = await this.isNonLocalRecordChanged(record);\r\n        const updatedRecord = await this.selectSaveType(record, sendToEventSourcing);\r\n\r\n        if (isNonLocalRecordChanged) {\r\n          const customRequestId = customRequestIds instanceof Array ? customRequestIds[index] : customRequestIds;\r\n          const eventOperation = this.createEventOperation(record, updatedRecord, customRequestId);\r\n          batchEvents.push(eventOperation);\r\n        }\r\n      }\r\n\r\n      await this.eventSourcing.createBatchEvents(this.schema.name, batchEvents);\r\n    };\r\n\r\n    return this.poSchemaService.limitedCallWrap(saveAll);\r\n  }\r\n\r\n  private async create(newRecord: any, sendToEventSourcing: boolean, customRequestId?: string): Promise<any> {\r\n    const time = new Date().getTime();\r\n\r\n    const syncProperties = {\r\n      [PoSchemaUtil.syncInternalIdFieldName]: time,\r\n      SyncInsertedDateTime: time,\r\n      SyncUpdatedDateTime: null,\r\n      SyncExclusionDateTime: null,\r\n      SyncDeleted: false,\r\n      SyncStatus: 0\r\n    };\r\n    const recordWithSyncProperties = { ...newRecord, ...syncProperties };\r\n\r\n    const recordedData = await this.poSchemaService.create(this.schema, recordWithSyncProperties);\r\n\r\n    if (sendToEventSourcing) {\r\n      await this.eventSourcing.create(this.schema.name, recordWithSyncProperties, customRequestId);\r\n    }\r\n\r\n    return recordedData;\r\n  }\r\n\r\n  private createEventOperation(\r\n    record: object,\r\n    updatedRecord: object,\r\n    customRequestId?: string\r\n  ): PoEventSourcingSummaryItem {\r\n    const operation = PoSchemaUtil.getRecordId(record, this.schema)\r\n      ? PoEventSourcingOperation.Update\r\n      : PoEventSourcingOperation.Insert;\r\n\r\n    const serverRecord = PoSchemaUtil.separateSchemaFields(this.schema, updatedRecord)['serverRecord'];\r\n\r\n    return {\r\n      record: serverRecord,\r\n      customRequestId: customRequestId,\r\n      operation: operation\r\n    };\r\n  }\r\n\r\n  private async isNonLocalRecordChanged(updatedRecord: object): Promise<boolean> {\r\n    const nonLocalFieldNames = PoSchemaUtil.getNonLocalFieldNames(this.schema);\r\n    const record = await this.poSchemaService.get(this.schema.name, updatedRecord[this.schema.idField]);\r\n\r\n    return !PoSchemaUtil.isModelsEqual(nonLocalFieldNames, record, updatedRecord);\r\n  }\r\n\r\n  private async selectSaveType(\r\n    record: object,\r\n    sendToEventSourcing: boolean,\r\n    customRequestId?: string\r\n  ): Promise<object> {\r\n    const hasId = PoSchemaUtil.getRecordId(record, this.schema);\r\n\r\n    return hasId\r\n      ? await this.update(record, sendToEventSourcing, customRequestId)\r\n      : await this.create(record, sendToEventSourcing, customRequestId);\r\n  }\r\n\r\n  private async update(updatedRecord: any, sendToEventSourcing: boolean, customRequestId?: string): Promise<object> {\r\n    updatedRecord.SyncUpdatedDateTime = new Date().getTime();\r\n    updatedRecord.SyncStatus = 0;\r\n\r\n    const isNonLocalRecordChanged = await this.isNonLocalRecordChanged(updatedRecord);\r\n    const recordedData = await this.poSchemaService.update(this.schema, updatedRecord);\r\n\r\n    if (isNonLocalRecordChanged && sendToEventSourcing) {\r\n      const serverRecord = PoSchemaUtil.separateSchemaFields(this.schema, updatedRecord)['serverRecord'];\r\n      await this.eventSourcing.update(this.schema.name, serverRecord, customRequestId);\r\n    }\r\n\r\n    return recordedData;\r\n  }\r\n}\r\n","/**\r\n * @usedBy PoSyncConfig, PoNetworkStatus\r\n *\r\n * @description\r\n *\r\n * Tipos de rede existentes no dispositivo.\r\n */\r\n\r\nexport enum PoNetworkType {\r\n  /** Define o tipo de rede como desconhecido (`unknown`). */\r\n  unknown,\r\n\r\n  /** Define o tipo de rede como `Ethernet`. */\r\n  ethernet,\r\n\r\n  /** Define o tipo de rede como `WiFi`. */\r\n  wifi,\r\n\r\n  /** Define o tipo de rede como `2G`. */\r\n  _2g,\r\n\r\n  /** Define o tipo de rede como `3G`. */\r\n  _3g,\r\n\r\n  /** Define o tipo de rede como `4G`. */\r\n  _4g,\r\n\r\n  /**\r\n   * Define o tipo de rede como `cellular`. Isso acontece na utilização dos navegadores\r\n   * dentro do dispositvo móvel, com exceção do *web view*.\r\n   */\r\n  cellular,\r\n\r\n  /** Define o tipo de rede como `none`. */\r\n  none\r\n}\r\n","import { PoDataTransform } from './po-data-transform.model';\r\n\r\n/**\r\n * @docsPrivate\r\n *\r\n * @description\r\n *\r\n * Classe responsável por implementar a classe `PoDataTransform` com os campos referentes ao padrão de\r\n * [API do PO UI](https://po-ui.io/guides/api).\r\n */\r\nexport class PoDataMessage extends PoDataTransform {\r\n  /**\r\n   * Retorna a propriedade `po_sync_date`, responsável por informar a data da última sincronização no guia de\r\n   * [API do PO UI](https://po-ui.io/guides/api).\r\n   *\r\n   * @returns {string} Nome do campo que contém a data da última sincronização.\r\n   */\r\n  getDateFieldName(): string {\r\n    return 'po_sync_date';\r\n  }\r\n\r\n  /**\r\n   * Retorna a propriedade `items`, responsável por informar a lista de registros vindos da API no guia de\r\n   * [API do PO UI](https://po-ui.io/guides/api).\r\n   *\r\n   * @returns {string} Nome da propriedade que contém a lista de registros.\r\n   */\r\n  getItemsFieldName(): string {\r\n    return 'items';\r\n  }\r\n\r\n  /**\r\n   * Retorna a propriedade `page`, responsável por informar o número da página de registros que a API retorna no guia de\r\n   * [API do PO UI](https://po-ui.io/guides/api).\r\n   *\r\n   * @returns {string} Nome da propriedade responsável por informar o número da página de registros.\r\n   */\r\n  getPageParamName(): string {\r\n    return 'page';\r\n  }\r\n\r\n  /**\r\n   * Retorna a propriedade `pageSize`, responsável pela quantidade de registros que serão exibidos por página no guia de\r\n   * [API do PO UI](https://po-ui.io/guides/api).\r\n   *\r\n   * @returns {string} Nome do parâmetro responsável pela quantidade de registros por página.\r\n   */\r\n  getPageSizeParamName(): string {\r\n    return 'pageSize';\r\n  }\r\n\r\n  /**\r\n   * Retorna um valor `boolean`, de acordo com a propriedade `hasNext` que é responsável por informar se há uma nova\r\n   * página de registros disponível no guia de [API do PO UI](https://po-ui.io/guides/api).\r\n   *\r\n   * @returns {boolean} Informa se tem próxima página de registros.\r\n   */\r\n  hasNext(): boolean {\r\n    return this.data.hasNext;\r\n  }\r\n}\r\n","import { PoNetworkType } from './po-network-type.enum';\r\n\r\n/**\r\n * @description\r\n *\r\n * Classe responsável por identificar a conexão de rede disponível no dispositivo.\r\n */\r\nexport class PoNetworkStatus {\r\n  private _type: PoNetworkType;\r\n\r\n  constructor(networtkType) {\r\n    this.setNetworkConnection(networtkType);\r\n  }\r\n\r\n  /**\r\n   * Retorna se o dispositivo está conectado na rede.\r\n   *\r\n   * @returns {boolean} Status da conexão com a rede.\r\n   */\r\n  get status(): boolean {\r\n    return this.type !== PoNetworkType.none;\r\n  }\r\n\r\n  /**\r\n   * Retorna o tipo de conexão do dispositivo.\r\n   *\r\n   * @returns {PoNetworkType} Tipo da conexão com a rede.\r\n   */\r\n  get type(): PoNetworkType {\r\n    return this._type;\r\n  }\r\n\r\n  set type(type: PoNetworkType) {\r\n    this._type = type;\r\n  }\r\n\r\n  /* istanbul ignore next */\r\n  private setDefaultTypeNavigation() {\r\n    return navigator.onLine ? PoNetworkType['ethernet'] : PoNetworkType.none;\r\n  }\r\n\r\n  private setNetworkConnection(networtkType): void {\r\n    if (!networtkType) {\r\n      this.type = this.setDefaultTypeNavigation();\r\n    } else {\r\n      const isGenerationMobile = ['2g', '3g', '4g'].includes(networtkType);\r\n\r\n      this.type = isGenerationMobile ? PoNetworkType['_' + networtkType] : PoNetworkType[String(networtkType)];\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { fromEvent, merge, Observable, Subject } from 'rxjs';\r\nimport { mapTo } from 'rxjs/operators';\r\n\r\nimport { Network } from '@awesome-cordova-plugins/network/ngx';\r\n\r\nimport { PoNetworkStatus } from './../../models';\r\n\r\n/**\r\n * @description\r\n *\r\n * O `PoNetworkService` é utilizado para verificar o status e o tipo da conexão de rede do dispositivo.\r\n */\r\n\r\n@Injectable()\r\nexport class PoNetworkService {\r\n  private networkType: string;\r\n  private networkTypeNow: Subject<{ status: boolean; type: string }>;\r\n  private poNetworkStatus: PoNetworkStatus;\r\n\r\n  constructor(network: Network) {\r\n    this.initNetwork(network);\r\n  }\r\n\r\n  /**\r\n   * Retorna as propriedades tipo e status da conexão do dispositivo no momento da chamada.\r\n   *\r\n   * @returns {PoNetworkStatus} Instância de [PoNetworkStatus](/documentation/po-network-status) com as\r\n   * propriedades da conexão.\r\n   */\r\n  getConnectionStatus(): PoNetworkStatus {\r\n    this.poNetworkStatus = new PoNetworkStatus(this.networkType);\r\n    return this.poNetworkStatus;\r\n  }\r\n\r\n  /**\r\n   * Notifica as mudanças no tipo de conexão de rede do dispositivo.\r\n   *\r\n   * @returns {Observable<{ status: boolean, type: string }>} Observable com as propriedades da conexão.\r\n   */\r\n  onChange(): Observable<{ status: boolean; type: string }> {\r\n    return this.networkTypeNow.asObservable();\r\n  }\r\n\r\n  private getNavigatorStatus(): Observable<any> {\r\n    return merge(\r\n      fromEvent(window, 'offline').pipe(mapTo(false)),\r\n      fromEvent(window, 'online').pipe(mapTo(true)),\r\n      Observable.create(sub => {\r\n        sub.next(navigator.onLine);\r\n        sub.complete();\r\n      })\r\n    );\r\n  }\r\n\r\n  private initNetwork(network: Network) {\r\n    this.networkTypeNow = new Subject();\r\n    this.initSubscriber(network);\r\n  }\r\n\r\n  private initSubscriber(network: Network) {\r\n    if (network) {\r\n      this.getNavigatorStatus().subscribe(status => {\r\n        this.networkType = network.type;\r\n        this.networkTypeNow.next({ status: status, type: this.networkType });\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { forkJoin, Observable, of, Subject, Subscription, timer } from 'rxjs';\r\nimport { expand, map, mergeMap, reduce } from 'rxjs/operators';\r\nimport { validateParameter, validateArray } from '../../utils/utils';\r\n\r\nimport { PoDataMessage, PoEntity } from '../../models';\r\nimport { PoEventSourcingService } from '../po-event-sourcing/po-event-sourcing.service';\r\nimport { PoHttpClientService } from '../po-http-client/po-http-client.service';\r\nimport { PoHttpRequestData } from '../po-http-client/interfaces/po-http-request-data.interface';\r\nimport { PoNetworkService } from '../po-network/po-network.service';\r\nimport { PoRequestType } from '../../models/po-request-type.enum';\r\nimport { PoSchemaDefinitionService } from './../po-schema/po-schema-definition/po-schema-definition.service';\r\nimport { PoSchemaService } from './../po-schema/po-schema.service';\r\nimport { PoSchemaUtil } from './../po-schema/po-schema-util/po-schema-util.model';\r\nimport { PoSyncConfig } from './interfaces/po-sync-config.interface';\r\nimport { PoSyncResponse } from '../po-sync/interfaces/po-sync-response.interface';\r\nimport { PoSyncSchema } from './interfaces/po-sync-schema.interface';\r\n\r\n/**\r\n * @description\r\n *\r\n * O `PoSyncService` é utilizado para configurar toda a base de dados que receberá as informações que serão\r\n * armazenadas *offline* vindas do servidor. Nele ocorre toda a preparação dos modelos de dados retornados por\r\n * cada consulta.\r\n */\r\n@Injectable()\r\nexport class PoSyncService {\r\n  models: Array<PoEntity> = [];\r\n\r\n  private config: PoSyncConfig;\r\n  private emitter: any;\r\n  private eventSub: Observable<any>;\r\n  private finishSyncSubject: Subject<null> = new Subject<null>();\r\n  private isSyncEnabled: boolean = true;\r\n  private schemas: Array<PoSyncSchema>;\r\n  private subscription: Subscription;\r\n  private syncing: boolean = false;\r\n  private timer: Observable<number>;\r\n\r\n  constructor(\r\n    private poEventSourcingService: PoEventSourcingService,\r\n    private poHttpClient: PoHttpClientService,\r\n    private poNetworkService: PoNetworkService,\r\n    private poSchemaDefinitionService: PoSchemaDefinitionService,\r\n    private poSchemaService: PoSchemaService\r\n  ) {}\r\n\r\n  /**\r\n   * Destrói todas as chaves do *storage* referentes ao `po-sync`, ou seja,\r\n   * as definições dos *schemas*, os registros de cada *schema* e a fila\r\n   * de eventos que estão para ser enviados ao servidor *(EventSourcing)*.\r\n   *\r\n   * > Para que não venham ocorrer erros em ações que dependam das definições dos *schemas*,\r\n   * recomenda-se utilizar o método `prepare()` em seguida.\r\n   *\r\n   * > Veja mais detalhes em [Fundamentos do PO Sync - Alterando as definições dos schemas](/guides/sync-fundamentals).\r\n   *\r\n   * @returns {Promise<any>} Promessa que é resolvida quando as chaves referentes ao `po-sync` forem destruídas.\r\n   */\r\n  async destroy(): Promise<any> {\r\n    const destroyFunction = async () => {\r\n      await this.poSchemaService.destroySchemasRecords();\r\n      await this.poSchemaDefinitionService.destroy();\r\n      await this.poEventSourcingService.destroyEventSourcingQueue();\r\n    };\r\n\r\n    return this.poSchemaService.limitedCallWrap(destroyFunction);\r\n  }\r\n\r\n  /**\r\n   * Desabilita todos os tipos de sincronização de dados (periódica, reativa e manual).\r\n   *\r\n   * > Para habilitar novamente a sincronização utilize o método [`PoSyncService.enableSync()`](documentation/po-sync#enable-sync).\r\n   */\r\n  disableSync() {\r\n    this.isSyncEnabled = false;\r\n\r\n    if (this.timer && this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * <a id=\"enable-sync\"></a>\r\n   * Habilita todos os tipos de sincronização de dados (periódica, reativa e manual).\r\n   *\r\n   * Por padrão, sempre que se inicializa uma aplicação com PO Sync as sincronizações já estão habilitadas.\r\n   */\r\n  enableSync() {\r\n    this.isSyncEnabled = true;\r\n    this.createSubscribe();\r\n  }\r\n\r\n  /**\r\n   * Método que disponibiliza a partir de sua inscrição o evento de retorno das operações da fila de eventos que\r\n   * foram enviadas ao servidor. A cada operação enviada para o servidor, será disparado um evento para a inscrição\r\n   * deste método.\r\n   *\r\n   * > Veja mais detalhes em [Fundamentos do PO Sync - Capturando respostas da sincronização](/guides/sync-fundamentals).\r\n   *\r\n   * @returns {Observable<PoSyncResponse>} Observable com um objeto do tipo `PoSyncResponse`.\r\n   */\r\n  getResponses(): Observable<PoSyncResponse> {\r\n    return this.poEventSourcingService.responsesSubject();\r\n  }\r\n\r\n  /**\r\n   * Retorna uma instância de `PoEntity` para um determinado *schema*.\r\n   *\r\n   * > Veja mais detalhes em [Fundamentos do PO Sync - Manipulando os registros de um schema](/guides/sync-fundamentals).\r\n   *\r\n   * @param {string} schemaName Nome do *schema*.\r\n   * @returns {PoEntity} Objeto para efetuar consultas e alterações nos dados.\r\n   */\r\n  getModel(schemaName: string): PoEntity {\r\n    const model = this.models[schemaName];\r\n    if (!model) {\r\n      throw new Error('Model not found: ' + schemaName);\r\n    }\r\n    return model;\r\n  }\r\n\r\n  /**\r\n   * Insere uma requisição HTTP na fila de eventos do `po-sync`.\r\n   *\r\n   * > Veja mais detalhes em [Fundamentos do PO Sync - Inserindo requisições HTTP na fila de eventos](/guides/sync-fundamentals).\r\n   *\r\n   * @param {PoHttpRequestData} poHttpRequestData Dados da requisição HTTP.\r\n   * @param {string} customRequestId Identificador customizado da requisição HTTP.\r\n   * @returns {Promise<number>} Promessa com o identificador da requisição HTTP criada.\r\n   */\r\n  insertHttpCommand(requestData: PoHttpRequestData, customRequestId?: string): Promise<number> {\r\n    validateParameter({ requestData });\r\n\r\n    return this.poEventSourcingService.httpCommand(requestData, customRequestId);\r\n  }\r\n\r\n  /**\r\n   * Efetua uma chamada na API do servidor para realizar a carga inicial dos dados. Deve ser chamado apenas uma vez\r\n   * na aplicação, após a preparação dos *schemas* realizada através do método `PoSyncService.prepare()`.\r\n   *\r\n   * > Veja mais detalhes em [Fundamentos do PO Sync - Carga inicial dos dados](/guides/sync-fundamentals).\r\n   *\r\n   * @returns {Observable<Array<{ entity: string, data: Array<any> }>>} Observable que notificará quando a\r\n   * carga inicial for concluída.\r\n   */\r\n  loadData(): Observable<Array<{ entity: string; data: Array<any> }>> {\r\n    const loads: Array<Observable<{ entity: string; data: Array<any> }>> = [];\r\n    this.schemas.forEach(el => loads.push(this.loadEntityData(el)));\r\n    return forkJoin(loads);\r\n  }\r\n\r\n  /**\r\n   * Responsável por notificar sempre que houver sincronismo.\r\n   *\r\n   * > Veja mais detalhes em [Fundamentos do PO Sync - Notificação pós-sincronização](/guides/sync-fundamentals).\r\n   *\r\n   * @returns {Observable<any>} Observable que é disparado a cada sincronismo realizado.\r\n   */\r\n  onSync(): Observable<any> {\r\n    if (!this.eventSub) {\r\n      this.eventSub = Observable.create(e => {\r\n        this.emitter = e;\r\n      });\r\n    }\r\n    return this.eventSub;\r\n  }\r\n\r\n  /**\r\n   * Prepara a aplicação criando os schemas e aplica as configurações.\r\n   *\r\n   * > Veja mais detalhes em [Fundamentos do PO Sync - Preparando a aplicação](/guides/sync-fundamentals).\r\n   *\r\n   * @param {Array<PoSyncSchema>} schemas Lista de *schemas* a serem preparados.\r\n   * @param {PoSyncConfig} config Configurações adicionais.\r\n   * @returns {Promise<any>} Promessa que é resolvida quando a aplicação estiver preparada para a utilização do `po-sync`.\r\n   */\r\n  prepare(schemas: Array<PoSyncSchema>, config?: PoSyncConfig): Promise<any> {\r\n    validateArray({ schemas });\r\n\r\n    const defaultSyncConfig: PoSyncConfig = {\r\n      type: this.poNetworkService.getConnectionStatus().type,\r\n      period: 60,\r\n      dataTransform: new PoDataMessage()\r\n    };\r\n\r\n    this.schemas = schemas;\r\n    this.config = config || defaultSyncConfig;\r\n    this.config.dataTransform = this.config.dataTransform || new PoDataMessage();\r\n    this.poEventSourcingService.config = this.config;\r\n    this.startTimer(this.config.period);\r\n    this.reactiveSync();\r\n    this.poEventSourcingService.onSaveData().subscribe(() => this.sync());\r\n\r\n    return this.saveSchemas().then(() => {\r\n      this.schemas.forEach(schema => {\r\n        this.models[schema.name] = new PoEntity(this.poEventSourcingService, schema, this.poSchemaService);\r\n      });\r\n      return Promise.resolve();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove um item da fila de eventos que espera a sincronização.\r\n   *\r\n   * > Veja mais detalhes em [Fundamentos do PO Sync - Capturando respostas da sincronização](/guides/sync-fundamentals).\r\n   *\r\n   * @param {any} idEventSourcing Identificador do item da fila de eventos.\r\n   * @returns {Promise<any>} Promessa que é resolvida quando o item da fila de eventos é removido.\r\n   */\r\n  removeItemOfSync(idEventSourcing: any): Promise<any> {\r\n    return this.poEventSourcingService.removeEventSourcingItem(idEventSourcing);\r\n  }\r\n\r\n  /**\r\n   * Reenvia os comandos pendentes na fila (inclusão, alteração e exclusão) e busca novos dados do servidor.\r\n   *\r\n   * > Veja mais detalhes em [Fundamentos do PO Sync - Capturando respostas da sincronização](/guides/sync-fundamentals).\r\n   *\r\n   * @returns {Promise<any>} Promessa que resolve o sincronismo disparado.\r\n   */\r\n  resumeSync(): Promise<any> {\r\n    if (!this.canSync()) {\r\n      const finishSyncSubscription = this.finishSyncSubject.asObservable().subscribe(() => {\r\n        finishSyncSubscription.unsubscribe();\r\n        return this.sync();\r\n      });\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return this.sync();\r\n  }\r\n\r\n  /**\r\n   * Dispara o sincronismo enviando os eventos pendentes (inclusão, alteração e exclusão) e buscando novos dados do servidor.\r\n   *\r\n   * O sincronismo somente será executado depois que o acesso a base de dados local do dispositivo for liberada.\r\n   *\r\n   * > Veja mais detalhes em [Fundamentos do PO Sync - Sincronização manual](/guides/sync-fundamentals).\r\n   *\r\n   * @returns {Promise<any>} Promessa que é resolvida quando o sincronismo for finalizado.\r\n   */\r\n  async sync(): Promise<any> {\r\n    if (this.canSync()) {\r\n      this.startSync();\r\n\r\n      try {\r\n        await this.poEventSourcingService.syncSend();\r\n        await this.poEventSourcingService.syncGet();\r\n\r\n        if (this.emitter) {\r\n          this.emitter.next();\r\n        }\r\n\r\n        this.finishSync();\r\n      } catch (error) {\r\n        this.syncError();\r\n      }\r\n    }\r\n  }\r\n\r\n  private canSync(): boolean {\r\n    if (this.syncing || !this.isSyncEnabled) {\r\n      return false;\r\n    } else {\r\n      const currentConnection = this.poNetworkService.getConnectionStatus();\r\n      const isConfiguredConnection = this.config && currentConnection.type === this.config.type;\r\n      const isConfigIncludesType =\r\n        this.config && this.config.type instanceof Array && this.config.type.includes(currentConnection.type);\r\n\r\n      return currentConnection.status && (!this.config || isConfiguredConnection || isConfigIncludesType);\r\n    }\r\n  }\r\n\r\n  private createSubscribe(): void {\r\n    if (this.timer) {\r\n      this.subscription = this.timer.subscribe(() => {\r\n        this.sync().then(() => {\r\n          this.subscription.unsubscribe();\r\n          this.subscription = null;\r\n          this.timer = null;\r\n          this.startTimer(this.config.period);\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  private finishSync(): void {\r\n    this.syncing = false;\r\n    this.finishSyncSubject.next(null);\r\n  }\r\n\r\n  private getOnePage(schema: PoSyncSchema, page: number = 1): Observable<any> {\r\n    const params = [];\r\n    params.push(`${this.config.dataTransform.getPageSizeParamName()}=${schema.pageSize}`);\r\n    params.push(`${this.config.dataTransform.getPageParamName()}=${page}`);\r\n\r\n    const url = `${PoSchemaUtil.getUrl(schema, PoRequestType.GET)}?${params.join('&')}`;\r\n\r\n    return this.poHttpClient.get(url).pipe(\r\n      map(response => response.body),\r\n      mergeMap(responseBody => {\r\n        const now = new Date().getTime();\r\n        responseBody[this.config.dataTransform.getItemsFieldName()].map(item => {\r\n          item.SyncInsertedDateTime = now;\r\n          item.SyncUpdatedDateTime = null;\r\n          item.SyncExclusionDateTime = null;\r\n          item.SyncDeleted = false;\r\n          item.SyncStatus = 2;\r\n        });\r\n        return this.poSchemaService\r\n          .updateAll(schema, responseBody[this.config.dataTransform.getItemsFieldName()])\r\n          .then(() => responseBody);\r\n      })\r\n    );\r\n  }\r\n\r\n  private loadEntityData(schema: PoSyncSchema): Observable<{ entity: string; data: Array<any> }> {\r\n    let page = 1;\r\n    return this.getOnePage(schema, page).pipe(\r\n      expand(data => {\r\n        this.config.dataTransform.transform(data);\r\n        const hasNext = this.config.dataTransform.hasNext();\r\n        if (hasNext) {\r\n          return this.getOnePage(schema, ++page);\r\n        } else {\r\n          return of();\r\n        }\r\n      }),\r\n      reduce(\r\n        (acc, obj) => {\r\n          acc.data = acc.data.concat(obj[this.config.dataTransform.getItemsFieldName()]);\r\n          return acc;\r\n        },\r\n        {\r\n          entity: schema.name,\r\n          data: []\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  private reactiveSync(): void {\r\n    this.poNetworkService.onChange().subscribe(networkStatus => {\r\n      if (networkStatus.status) {\r\n        this.startTimer(this.config.period);\r\n        return this.sync();\r\n      }\r\n\r\n      if (this.subscription) {\r\n        this.subscription.unsubscribe();\r\n      }\r\n    });\r\n  }\r\n\r\n  private async saveSchemas(): Promise<any> {\r\n    const storageSchemas: Array<PoSyncSchema> = await this.poSchemaDefinitionService.getAll();\r\n    this.schemas.forEach(schema => (schema.lastSync = PoSchemaUtil.getLastSync(storageSchemas, schema.name)));\r\n    return this.poSchemaDefinitionService.saveAll(this.schemas);\r\n  }\r\n\r\n  private startSync(): void {\r\n    this.syncing = true;\r\n  }\r\n\r\n  private startTimer(period): void {\r\n    if (period && this.isSyncEnabled) {\r\n      this.timer = timer(period * 1000);\r\n      this.createSubscribe();\r\n    }\r\n  }\r\n\r\n  private syncError(): void {\r\n    this.finishSync();\r\n  }\r\n}\r\n","import { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { Network } from '@awesome-cordova-plugins/network/ngx';\r\n\r\nimport { PoEventSourcingService } from './services/po-event-sourcing/po-event-sourcing.service';\r\nimport { PoHttpClientService } from './services/po-http-client/po-http-client.service';\r\nimport { PoNetworkService } from './services/po-network/po-network.service';\r\nimport { PoSchemaDefinitionService } from './services/po-schema/po-schema-definition/po-schema-definition.service';\r\nimport { PoSchemaService } from './services/po-schema/po-schema.service';\r\nimport { PoSyncService } from './services/po-sync/po-sync.service';\r\n\r\n/**\r\n * @description\r\n *\r\n * Módulo do componente PoSync responsável pela sincronia de dados com backends\r\n */\r\n@NgModule({\r\n  providers: [\r\n    PoEventSourcingService,\r\n    PoNetworkService,\r\n    PoSchemaDefinitionService,\r\n    PoSchemaService,\r\n    PoSyncService,\r\n    PoHttpClientService,\r\n    Network\r\n  ],\r\n  imports: [HttpClientModule]\r\n})\r\nexport class PoSyncModule {}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.PoSchemaDefinitionService","i2","i1","i2.PoSchemaService","i3","i4.PoHttpClientService","i1.PoEventSourcingService","i2.PoHttpClientService","i3.PoNetworkService","i4.PoSchemaDefinitionService","i5.PoSchemaService"],"mappings":"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"}