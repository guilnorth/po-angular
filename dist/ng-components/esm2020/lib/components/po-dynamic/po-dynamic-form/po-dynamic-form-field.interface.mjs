export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHluYW1pYy1mb3JtLWZpZWxkLmludGVyZmFjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1keW5hbWljL3BvLWR5bmFtaWMtZm9ybS9wby1keW5hbWljLWZvcm0tZmllbGQuaW50ZXJmYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1xyXG4gIFBvQ2hlY2tib3hHcm91cE9wdGlvbixcclxuICBQb0NvbWJvRmlsdGVyLFxyXG4gIFBvQ29tYm9MaXRlcmFscyxcclxuICBQb0RhdGVwaWNrZXJJc29Gb3JtYXQsXHJcbiAgUG9EYXRlcGlja2VyUmFuZ2VMaXRlcmFscyxcclxuICBQb0xvb2t1cEZpbHRlcixcclxuICBQb0xvb2t1cExpdGVyYWxzLFxyXG4gIFBvTXVsdGlzZWxlY3RGaWx0ZXJNb2RlLFxyXG4gIFBvTXVsdGlzZWxlY3RMaXRlcmFscyxcclxuICBQb1N3aXRjaExhYmVsUG9zaXRpb25cclxufSBmcm9tICcuLi8uLi9wby1maWVsZCc7XHJcbmltcG9ydCB7IFBvTG9va3VwQWR2YW5jZWRGaWx0ZXIgfSBmcm9tICcuLi8uLi9wby1maWVsZC9wby1sb29rdXAvaW50ZXJmYWNlcy9wby1sb29rdXAtYWR2YW5jZWQtZmlsdGVyLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IFBvTG9va3VwQ29sdW1uIH0gZnJvbSAnLi4vLi4vcG8tZmllbGQvcG8tbG9va3VwL2ludGVyZmFjZXMvcG8tbG9va3VwLWNvbHVtbi5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb011bHRpc2VsZWN0T3B0aW9uIH0gZnJvbSAnLi4vLi4vcG8tZmllbGQvcG8tbXVsdGlzZWxlY3QvcG8tbXVsdGlzZWxlY3Qtb3B0aW9uLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IFBvU2VsZWN0T3B0aW9uIH0gZnJvbSAnLi4vLi4vcG8tZmllbGQvcG8tc2VsZWN0L3BvLXNlbGVjdC1vcHRpb24uaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgRm9yY2VPcHRpb25Db21wb25lbnRFbnVtIH0gZnJvbSAnLi4vcG8tZHluYW1pYy1maWVsZC1mb3JjZS1jb21wb25lbnQuZW51bSc7XHJcblxyXG5pbXBvcnQgeyBQb0R5bmFtaWNGaWVsZCB9IGZyb20gJy4uL3BvLWR5bmFtaWMtZmllbGQuaW50ZXJmYWNlJztcclxuXHJcbi8qKlxyXG4gKiBAdXNlZEJ5IFBvRHluYW1pY0Zvcm1Db21wb25lbnQsIFBvQWR2YW5jZWRGaWx0ZXJDb21wb25lbnQsIFBvUGFnZUR5bmFtaWNTZWFyY2hDb21wb25lbnRcclxuICpcclxuICogQGRvY3NFeHRlbmRzIFBvRHluYW1pY0ZpZWxkXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBJbnRlcmZhY2UgcGFyYSBkZWZpbmnDp8OjbyBkYXMgcHJvcHJpZWRhZGVzIGRvcyBjYW1wb3MgZGUgZW50cmFkYSBxdWUgc2Vyw6NvIGNyaWFkb3MgZGluYW1pY2FtZW50ZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUG9EeW5hbWljRm9ybUZpZWxkIGV4dGVuZHMgUG9EeW5hbWljRmllbGQge1xyXG4gIC8qKlxyXG4gICAqIERlZmluZSBhcyBjb2x1bmFzIHBhcmEgdXRpbGl6YcOnw6NvIGRhIGJ1c2NhIGF2YW7Dp2FkYS4gVXNhZGEgc29tZW50ZSBlbSBjb25qdW50byBjb20gYSBwcm9wcmllZGFkZSBgc2VhcmNoU2VydmljZWAsXHJcbiAgICogZXNzYSBwcm9wcmllZGFkZSBkZXZlIHJlY2ViZXIgdW0gYXJyYXkgZGUgb2JqZXRvcyBxdWUgaW1wbGVtZW50YW0gYSBpbnRlcmZhY2UgW2BQb0xvb2t1cENvbHVtbmBdKC9kb2N1bWVudGF0aW9uL3BvLWxvb2t1cCkuXHJcbiAgICpcclxuICAgKiA+IENhc28gc2VqYW0gaW5mb3JtYWRhcyBjb2x1bmFzLCBkZXZlLXNlIG9icmlnYXRvcmlhbWVudGUgY29udGVyIGNvbHVuYXMgZGVmaW5pZGFzIGNvbW8gKmxhYmVsKiBlICp2YWx1ZSogcGFyYSB2YWxvcmVzXHJcbiAgICogZGUgdGVsYSBlIGRvIG1vZGVsIHJlc3BlY3RpdmFtZW50ZS5cclxuICAgKlxyXG4gICAqICoqQ29tcG9uZW50ZXMgY29tcGF0w612ZWlzOioqIGBwby1yYWRpby1ncm91cGAsIGBwby1sb29rdXBgLCBgcG8tY2hlY2tib3gtZ3JvdXBgLlxyXG4gICAqL1xyXG4gIGNvbHVtbnM/OiBBcnJheTxQb0xvb2t1cENvbHVtbj4gfCBudW1iZXI7XHJcblxyXG4gIC8qKiBEZWZpbmUgYSBvYnJpZ2F0b3JpZWRhZGUgZG8gY2FtcG8uICovXHJcbiAgcmVxdWlyZWQ/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBEZWZpbmUgc2UgYSBpbmRpY2HDp8OjbyBkZSBjYW1wbyBvcGNpb25hbCBzZXLDoSBleGliaWRhLlxyXG4gICAqXHJcbiAgICogPiBBIGluZGljYcOnw6NvIG7Do28gc2Vyw6EgZXhpYmlkYSwgc2U6XHJcbiAgICogLSBPIGNhbXBvIGZvciBgcmVxdWlyZWRgLCBvdTtcclxuICAgKiAtIE7Do28gcG9zc3VpciBgaGVscGAgZSBgbGFiZWxgLlxyXG4gICAqL1xyXG4gIG9wdGlvbmFsPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogTGlzdGEgZGUgb3DDp8O1ZXMgcXVlIHNlcsOjbyBleGliaWRvcyBlbSB1bSBjb21wb25lbnRlLCBwb2RlbmRvIHNlbGVjaW9uYXIgdW1hIG9ww6fDo28uXHJcbiAgICpcclxuICAgKiAqKkNvbXBvbmVudGVzIGNvbXBhdMOtdmVpczoqKiBgcG8tc2VsZWN0YCwgYHBvLXJhZGlvLWdyb3VwYCwgYHBvLWNoZWNrYm94LWdyb3VwYCwgYHBvLW11bHRpc2VsZWN0YC5cclxuICAgKiAqL1xyXG4gIG9wdGlvbnM/OiBBcnJheTxzdHJpbmc+IHwgQXJyYXk8UG9TZWxlY3RPcHRpb24+IHwgQXJyYXk8UG9NdWx0aXNlbGVjdE9wdGlvbj4gfCBBcnJheTxQb0NoZWNrYm94R3JvdXBPcHRpb24+O1xyXG5cclxuICAvKipcclxuICAgKiBQZXJtaXRlIHF1ZSBvIHVzdcOhcmlvIGZhw6dhIG3Dumx0aXBsYSBzZWxlw6fDo28gZGVudHJvIGRhIGxpc3RhIGRlIG9ww6fDtWVzLlxyXG4gICAqL1xyXG4gIG9wdGlvbnNNdWx0aT86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqICBTZXJ2acOnbyBxdWUgc2Vyw6EgdXRpbGl6YWRvIHBhcmEgYnVzY2FyIG9zIGl0ZW5zIGUgcHJlZW5jaGVyIGEgbGlzdGEgZGUgb3DDp8O1ZXMgZGluYW1pY2FtZW50ZS5cclxuICAgKiAgUG9kZSBzZXIgaW5mb3JtYWRhIHVtYSBVUkwgb3UgdW1hIGluc3RhbmNpYSBkbyBzZXJ2acOnbyBiYXNlYWRvIGVtIFBvQ29tYm9GaWx0ZXIuXHJcbiAgICogICoqSW1wb3J0YW50ZSoqXHJcbiAgICogID4gUGFyYSBxdWUgZnVuY2lvbmUgY29ycmV0YW1lbnRlLCDDqSBpbXBvcnRhbnRlIHF1ZSBvIHNlcnZpw6dvIHNpZ2Egb1xyXG4gICAqICBbZ3VpYSBkZSBBUEkgZG8gUE8gVUldKGh0dHBzOi8vcG8tdWkuaW8vZ3VpZGVzL2FwaSkuXHJcbiAgICovXHJcbiAgb3B0aW9uc1NlcnZpY2U/OiBzdHJpbmcgfCBQb0NvbWJvRmlsdGVyO1xyXG5cclxuICAvKipcclxuICAgKiBTZXJ2acOnbyBxdWUgc2Vyw6EgdXRpbGl6YWRvIHBhcmEgcmVhbGl6YXIgYSBidXNjYSBhdmFuw6dhZGEuIFBvZGUgc2VyIHV0aWxpemFkbyBlbSBjb25qdW50byBjb20gYSBwcm9wcmllZGFkZSBgY29sdW1uc2AuXHJcbiAgICogUG9kZSBzZXIgc2VyIGluZm9ybWFkYSB1bWEgVVJMIG91IHVtYSBpbnN0YW5jaWEgZG8gc2VydmnDp28gYmFzZWFkbyBlbSBQb0xvb2t1cEZpbHRlci5cclxuICAgKiAqKkltcG9ydGFudGU6KipcclxuICAgKiA+IENhc28gdXRpbGl6YXIgYSBwcm9wcmllZGFkZSBgb3B0aW9uc1NlcnZpY2VgIGVzdGEgcHJvcHJpZWRhZGUgc2Vyw6EgaWdub3JhZGEuXHJcbiAgICogPiBQYXJhIHF1ZSBmdW5jaW9uZSBjb3JyZXRhbWVudGUsIMOpIGltcG9ydGFudGUgcXVlIG8gc2VydmnDp28gc2lnYSBvXHJcbiAgICogW2d1aWEgZGUgQVBJIGRvIFBPIFVJXShodHRwczovL3BvLXVpLmlvL2d1aWRlcy9hcGkpLlxyXG4gICAqL1xyXG4gIHNlYXJjaFNlcnZpY2U/OiBzdHJpbmcgfCBQb0xvb2t1cEZpbHRlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogTcOhc2NhcmEgcGFyYSBvIGNhbXBvLlxyXG4gICAqXHJcbiAgICogKipDb21wb25lbnRlcyBjb21wYXTDrXZlaXM6KiogYHBvLWlucHV0YC5cclxuICAgPiB0YW1iw6ltIMOpIGF0cmlidcOtZG8gYW8gdXRpbGl6YXIgYSBwcm9wcmllZGFkZSBgdHlwZTogdGltZWAuXHJcbiAgICovXHJcbiAgbWFzaz86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogRGVmaW5lIHF1ZSBvIHZhbG9yIGRvIGNvbXBvbmVudGUgc2Vyw6EgY29uZm9ybWUgZXNwZWNpZmljYWRvIG5hIG1hc2PDoXJhLiBPIHZhbG9yIHBhZHLDo28gw6kgYGZhbHNlYC5cclxuICAgKlxyXG4gICAqICoqQ29tcG9uZW50ZXMgY29tcGF0w612ZWlzOioqIGBwby1pbnB1dGAuXHJcbiAgID4gdGFtYsOpbSDDqSBhdHJpYnXDrWRvIGFvIHV0aWxpemFyIGEgcHJvcHJpZWRhZGUgYHR5cGU6IHRpbWVgLlxyXG4gICAqICovXHJcbiAgbWFza0Zvcm1hdE1vZGVsPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqIERlZmluZSBvIMOtY29uZSBxdWUgc2Vyw6EgZXhpYmlkbyBubyBpbsOtY2lvIGRvIGNhbXBvLlxyXG4gICAqID4gRXN0YSBwcm9wcmllZGFkZSBzw7MgcG9kZSBzZXIgdXRpbGl6YWRvIG5vcyBjYW1wb3M6XHJcbiAgICogLSBJbnB1dDtcclxuICAgKiAtIE51bWJlcjtcclxuICAgKiAtIERlY2ltYWw7XHJcbiAgICogLSBDb21ibztcclxuICAgKiAtIFBhc3N3b3JkO1xyXG4gICAqXHJcbiAgICogPiBWZWphIGEgZGlzcG9uaWJpbGlkYWRlIGRlIMOtY29uZXMgZW0gW2JpYmxpb3RlY2EgZGUgw61jb25lc10oZ3VpZGVzL2ljb25zKS5cclxuICAgKi9cclxuICBpY29uPzogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD47XHJcblxyXG4gIC8qKiAgUXVhbnRpZGFkZSBtw6F4aW1hIGRlIGNhc2FzIGRlY2ltYWlzLlxyXG4gICAqXHJcbiAgICogPiBFc3RhIHByb3ByaWVkYWRlIHPDsyBwb2RlIHNlciB1dGlsaXphZGEgcXVhbmRvIG8gYHR5cGVgIGZvciAqY3VycmVuY3kqLlxyXG4gICAqL1xyXG4gIGRlY2ltYWxzTGVuZ3RoPzogbnVtYmVyO1xyXG5cclxuICAvKiogUXVhbnRpZGFkZSBtw6F4aW1hIGRlIGTDrWdpdG9zIGFudGVzIGRvIHNlcGFyYWRvciBkZWNpbWFsLiBPIHZhbG9yIG3DoXhpbW8gcGVybWl0aWRvIMOpIDEzXHJcbiAgICpcclxuICAgKiA+IEVzdGEgcHJvcHJpZWRhZGUgc8OzIHBvZGUgc2VyIHV0aWxpemFkYSBxdWFuZG8gbyBgdHlwZWAgZm9yICpjdXJyZW5jeSouXHJcbiAgICovXHJcbiAgdGhvdXNhbmRNYXhsZW5ndGg/OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlZ2V4IHBhcmEgdmFsaWRhw6fDo28gZG8gY2FtcG8uXHJcbiAgICpcclxuICAgKiAqKkNvbXBvbmVudGVzIGNvbXBhdMOtdmVpczoqKiBgcG8taW5wdXRgLCBgcG8tcGFzc3dvcmRgLlxyXG4gICAqICovXHJcbiAgcGF0dGVybj86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogVGFtYW5obyBtw61uaW1vIGRlIGNhcmFjdGVyZXMuXHJcbiAgICpcclxuICAgKiAqKkNvbXBvbmVudGVzIGNvbXBhdMOtdmVpczoqKiBgcG8taW5wdXRgLCBgcG8tbnVtYmVyYCwgYHBvLWRlY2ltYWxgLCBgcG8tdGV4dGFyZWFgLCBgcG8tcGFzc3dvcmRgLlxyXG4gICAqICovXHJcbiAgbWluTGVuZ3RoPzogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBUYW1hbmhvIG3DoXhpbW8gZGUgY2FyYWN0ZXJlcy5cclxuICAgKlxyXG4gICAqICoqQ29tcG9uZW50ZXMgY29tcGF0w612ZWlzOioqIGBwby1pbnB1dGAsIGBwby1udW1iZXJgLCBgcG8tZGVjaW1hbGAsIGBwby10ZXh0YXJlYWAsIGBwby1wYXNzd29yZGAuXHJcbiAgICovXHJcbiAgbWF4TGVuZ3RoPzogbnVtYmVyO1xyXG5cclxuICAvKiogRGVzYWJpbGl0YSBvIGNhbXBvIGNhc28gaW5mb3JtYXIgbyB2YWxvciAqdHJ1ZSouICovXHJcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xyXG5cclxuICAvKiogVGV4dG8gZGUgYWp1ZGEuICovXHJcbiAgaGVscD86IHN0cmluZztcclxuXHJcbiAgLyoqIFRleHRvIGV4aWJpZG8gcXVhbmRvIG8gdmFsb3IgZG8gY29tcG9uZW50ZSBmb3IgKnRydWUqLiAqL1xyXG4gIGJvb2xlYW5UcnVlPzogc3RyaW5nO1xyXG5cclxuICAvKiogVGV4dG8gZXhpYmlkbyBxdWFuZG8gbyB2YWxvciBkbyBjb21wb25lbnRlIGZvciAqZmFsc2UqLiAqL1xyXG4gIGJvb2xlYW5GYWxzZT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogVmFsb3IgbcOheGltbyBhIHNlciBpbmZvcm1hZG8gbm8gY29tcG9uZW50ZSwgcG9kZW5kbyBzZXIgdXRpbGl6YWRvIHF1YW5kbyBvIHRpcG8gZGUgZGFkbyBwb3IgKm51bWJlciosICpkYXRlKiBvdSAqZGF0ZVRpbWUqLlxyXG4gICAqXHJcbiAgICogKipDb21wb25lbnRlcyBjb21wYXTDrXZlaXM6KiogYHBvLWRhdGVwaWNrZXJgLCBgcG8tZGF0ZXBpY2tlci1yYW5nZWAsIGBwby1udW1iZXJgLCBgcG8tZGVjaW1hbGBcclxuICAgKiAqL1xyXG4gIG1heFZhbHVlPzogc3RyaW5nIHwgbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBWYWxvciBtw61uaW1vIGEgc2VyIGluZm9ybWFkbyBubyBjb21wb25lbnRlLCBwb2RlbmRvIHNlciB1dGlsaXphZG8gcXVhbmRvIG8gdGlwbyBkZSBkYWRvIHBvciAqbnVtYmVyKiwgKmRhdGUqIG91ICpkYXRlVGltZSouXHJcbiAgICpcclxuICAgKiAqKkNvbXBvbmVudGVzIGNvbXBhdMOtdmVpczoqKiBgcG8tZGF0ZXBpY2tlcmAsIGBwby1kYXRlcGlja2VyLXJhbmdlYCwgYHBvLW51bWJlcmAsIGBwby1kZWNpbWFsYFxyXG4gICAqL1xyXG4gIG1pblZhbHVlPzogc3RyaW5nIHwgbnVtYmVyO1xyXG5cclxuICAvKiogUXVhbnRpZGFkZSBkZSBsaW5oYXMgZXhpYmlkYXMgbm8gYHBvLXRleHRhcmVhYC4gKi9cclxuICByb3dzPzogbnVtYmVyO1xyXG5cclxuICAvKiogRXNjb25kZSBhIGluZm9ybWHDp8OjbyBlc3RpbG8gKnBhc3N3b3JkKiwgcG9kZSBzZXIgdXRpbGl6YWRvIHF1YW5kbyBvIHRpcG8gZGUgZGFkbyBmb3IgKnN0cmluZyouICovXHJcbiAgc2VjcmV0PzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogRnVuw6fDo28gb3Ugc2VydmnDp28gcGFyYSB2YWxpZGFyIGFzICoqbXVkYW7Dp2FzIGRvIGNhbXBvKiouXHJcbiAgICpcclxuICAgKiAqIEEgcHJvcHJpZWRhZGUgYWNlaXRhIG9zIHNlZ3VpbnRlcyB0aXBvczpcclxuICAgKiAtICoqU3RyaW5nKio6IEVuZHBvaW50IHVzYWRvIHBlbG8gY29tcG9uZW50ZSBwYXJhIHJlcXVpc2nDp8OjbyB2aWEgYFBPU1RgLlxyXG4gICAqIC0gKipGdW5jdGlvbioqOiBNw6l0b2RvIHF1ZSBzZXLDoSBleGVjdXRhZG8uXHJcbiAgICpcclxuICAgKiBBbyBzZXIgZXhlY3V0YWRvLCBpcsOhIHJlY2ViZXIgY29tbyBwYXLDom1ldHJvIHVtIG9iamV0byBjb20gbyBub21lIGRhIHByb3ByaWVkYWRlXHJcbiAgICogYWx0ZXJhZGEgZSBvIG5vdm8gdmFsb3IsIGNvbmZvcm1lIGEgaW50ZXJmYWNlIGBQb0R5bmFtaWNGb3JtRmllbGRDaGFuZ2VkYDpcclxuICAgKlxyXG4gICAqIGBgXHJcbiAgICogeyBwcm9wZXJ0eTogJ3Byb3BlcnR5IG5hbWUnLCB2YWx1ZTogJ25ldyB2YWx1ZScgfVxyXG4gICAqIGBgXHJcbiAgICpcclxuICAgKiBPIHJldG9ybm8gZGVzdGEgZnVuw6fDo28gZGV2ZSBzZXIgZG8gdGlwbyBbUG9EeW5hbWljRm9ybUZpZWxkVmFsaWRhdGlvbl0oZG9jdW1lbnRhdGlvbi9wby1keW5hbWljLWZvcm0jcG8tZHluYW1pYy1mb3JtLWZpZWxkLXZhbGlkYXRpb24pLFxyXG4gICAqIG9uZGUgbyB1c3XDoXJpbyBwb2RlcsOhIGRldGVybWluYXIgYXMgbm92YXMgcHJvcHJpZWRhZGVzIGRvIGNhbXBvLlxyXG4gICAqIFBvciBleGVtcGxvOlxyXG4gICAqXHJcbiAgICogYGBcclxuICAgKiBvbkNoYW5nZUZpZWxkKGNoYW5nZVZhbHVlKTogUG9EeW5hbWljRm9ybUZpZWxkVmFsaWRhdGlvbiB7XHJcbiAgICpcclxuICAgKiBpZiAoY2hhbmdlVmFsdWUucHJvcGVydHkgPT09ICdiaXJ0aGRheScgJiYgIXRoaXMudmFsaWRhdGUoJ2JpcnRoZGF5JykpIHtcclxuICAgKiAgIHJldHVybiB7XHJcbiAgICogICAgIHZhbHVlOiAnJyxcclxuICAgKiAgICAgZmllbGQ6IHsgcHJvcGVydHk6ICdiaXJ0aGRheScsIHJlcXVpcmVkOiB0cnVlIH0sXHJcbiAgICogICAgIGZvY3VzOiB0cnVlXHJcbiAgICogICB9O1xyXG4gICAqIH1cclxuICAgKiBgYFxyXG4gICAqXHJcbiAgICogUGFyYSByZWZlcmVuY2lhciBhIHN1YSBmdW7Dp8OjbyB1dGlsaXplIGEgcHJvcHJpZWRhZGUgYGJpbmRgLCBwb3IgZXhlbXBsbzpcclxuICAgKiBgYFxyXG4gICAqIHsgcHJvcGVydHk6ICdzdGF0ZScsIGdyaWRDb2x1bW5zOiA2LCB2YWxpZGF0ZTogdGhpcy5teUZ1bmN0aW9uLmJpbmQodGhpcykgfVxyXG4gICAqIGBgXHJcbiAgICovXHJcbiAgdmFsaWRhdGU/OiBzdHJpbmcgfCBGdW5jdGlvbjtcclxuXHJcbiAgLyoqXHJcbiAgICogT2JqZXRvIHF1ZSBzZXLDoSBlbnZpYWRvIGNvbW8gcGFyw6JtZXRybyBuYXMgcmVxdWlzacOnw7VlcyBkZSBidXNjYSB1c2Fkb3MgcGVsb3MgY29tcG9uZW50ZXMgYHBvLWxvb2t1cGAgZVxyXG4gICAqIGBwby1jb21ib2AuXHJcbiAgICpcclxuICAgKiBQb3IgZXhlbXBsbywgcGFyYSBvIHBhcsOibWV0cm8gYHsgYWdlOiAyMyB9YCBhIFVSTCBkYSByZXF1aXNpw6fDo28gZmljYXJpYTpcclxuICAgKlxyXG4gICAqIGBgXHJcbiAgICogdXJsICsgP2FnZT0yMyZmaWx0ZXI9UGV0ZXJcclxuICAgKiBgYFxyXG4gICAqL1xyXG4gIHBhcmFtcz86IGFueTtcclxuXHJcbiAgLyoqXHJcbiAgICogTWVuc2FnZW0gcXVlIHNlcsOhIGFwcmVzZW50YWRhIHF1YW5kbyBvIGNhbXBvIGZpY2FyIGludsOhbGlkby5cclxuICAgKlxyXG4gICAqIE8gY2FtcG8gZmljYSBpbnbDoWxpZG8gcXVhbmRvIGFzIHNlZ3VpbnRlcyBwcm9wcmllZGFkZXMgbsOjbyBmb3JlbSByZXNwZWl0YWRhczpcclxuICAgKiAgLSBwYXR0ZXJuO1xyXG4gICAqICAtIG1pblZhbHVlO1xyXG4gICAqICAtIG1heFZhbHVlO1xyXG4gICAqXHJcbiAgICogPiBFc3RhIG1lbnNhZ2VtIG7Do28gw6kgYXByZXNlbnRhZGEgcXVhbmRvIG8gY2FtcG8gZXN0aXZlciB2YXppbywgbWVzbW8gcXVlIGVsZSBzZWphIHJlcXVlcmlkby5cclxuICAgKlxyXG4gICAqICoqQ29tcG9uZW50ZXMgY29tcGF0w612ZWlzOioqIGBwby1kYXRlcGlja2VyYCwgYHBvLWlucHV0YCwgYHBvLW51bWJlcmAsIGBwby1kZWNpbWFsYCwgYHBvLXBhc3N3b3JkYC5cclxuICAgKi9cclxuICBlcnJvck1lc3NhZ2U/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEZvcm1hdG8gZGUgZXhpYmnDp8OjbyBubyBjYW1wby5cclxuICAgKlxyXG4gICAqIEFvIHV0aWxpemFyIGVzdGEgcHJvcHJpZWRhZGUgY29tIG8gYHR5cGVgICpQb0R5bmFtaWNGaWVsZFR5cGUuRGF0ZSogb3UgKlBvRHluYW1pY0ZpZWxkVHlwZS5EYXRlVGltZSosXHJcbiAgICogcG9kZSBzZXIgdXRpbGl6YWRhIHBhcmEgZm9ybWF0YcOnw6NvIGRlIGV4aWJpw6fDo28gZGEgZGF0YTpcclxuICAgKlxyXG4gICAqIFZhbG9yZXMgdsOhbGlkb3M6XHJcbiAgICpcclxuICAgKiAtIGRkL21tL3l5eXlcclxuICAgKiAtIG1tL2RkL3l5eXlcclxuICAgKiAtIHl5eXkvbW0vZGRcclxuICAgKlxyXG4gICAqXHJcbiAgICogVGFtYsOpbSBwb2RlLXNlIHV0aWxpemFyIGVtIGNvbmp1bnRvIGNvbSBgc2VhcmNoU2VydmljZWAsIGluZm9ybWFuZG8gdW1hIGxpc3RhIGRlIHByb3ByaWVkYWRlcyBxdWUgc2Vyw6EgdXRpbGl6YWRvXHJcbiAgICogcGFyYSBmb3JtYXRhw6fDo28gZGEgZXhpYmnDp8OjbyBubyBjYW1wbywgcG9yIGV4ZW1wbG86IFtcImlkXCIsIFwibmFtZVwiXS5cclxuICAgKi9cclxuICBmb3JtYXQ/OiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+O1xyXG5cclxuICAvKipcclxuICAgKiBOb21lIGRhIHByb3ByaWVkYWRlIGRvIG9iamV0byByZXRvcm5hZG8gcXVlIHNlcsOhIHV0aWxpemFkbyBjb21vIGRlc2NyacOnw6NvIGRvIGNhbXBvLlxyXG4gICAqXHJcbiAgICogTyB2YWxvciBwYWRyw6NvIMOpOiBgbGFiZWxgLlxyXG4gICAqXHJcbiAgICogPiBFc3RhIHByb3ByaWVkYWRlIHBvZGUgc2VyIHV0aWxpemFkYSBlbSBjb25qdW50byBjb206IGBvcHRpb25zU2VydmljZWAgZSBgc2VhcmNoU2VydmljZWAuXHJcbiAgICovXHJcbiAgZmllbGRMYWJlbD86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogTm9tZSBkYSBwcm9wcmllZGFkZSBkbyBvYmpldG8gcmV0b3JuYWRvIHF1ZSBzZXLDoSB1dGlsaXphZG8gY29tbyB2YWxvciBkbyBjYW1wby5cclxuICAgKlxyXG4gICAqIE8gdmFsb3IgcGFkcsOjbyDDqTogYHZhbHVlYC5cclxuICAgKlxyXG4gICAqID4gRXN0YSBwcm9wcmllZGFkZSBwb2RlIHNlciB1dGlsaXphZGEgZW0gY29uanVudG8gY29tOiBgb3B0aW9uc1NlcnZpY2VgIGUgYHNlYXJjaFNlcnZpY2VgLlxyXG4gICAqL1xyXG4gIGZpZWxkVmFsdWU/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEluZm9ybWEgYSBvcmRlbSBkZSBleGliacOnw6NvIGRvIGNhbXBvLlxyXG4gICAqXHJcbiAgICogRXhlbXBsbyBkZSB1dGlsaXphw6fDo286XHJcbiAgICpcclxuICAgKiBgYFxyXG4gICAqIFtcclxuICAgKiAgIHsgcHJvcGVydHk6ICd0ZXN0IDEnLCBvcmRlcjogMiB9LFxyXG4gICAqICAgeyBwcm9wZXJ0eTogJ3Rlc3QgMicsIG9yZGVyOiAxIH0sXHJcbiAgICogICB7IHByb3BlcnR5OiAndGVzdCAzJyB9LFxyXG4gICAqICAgeyBwcm9wZXJ0eTogJ3Rlc3QgNCcsIG9yZGVyOiAzIH1cclxuICAgKiBdO1xyXG4gICAqIGBgXHJcbiAgICpcclxuICAgKiBOYSBleGliacOnw6NvIGEgb3JkZW0gZmljYXLDoSBkZXNzYSBmb3JtYTpcclxuICAgKiBgYFxyXG4gICAqIFtcclxuICAgKiAgIHsgcHJvcGVydHk6ICd0ZXN0IDInLCBvcmRlcjogMSB9LFxyXG4gICAqICAgeyBwcm9wZXJ0eTogJ3Rlc3QgMScsIG9yZGVyOiAyIH0sXHJcbiAgICogICB7IHByb3BlcnR5OiAndGVzdCA0Jywgb3JkZXI6IDMgfSxcclxuICAgKiAgIHsgcHJvcGVydHk6ICd0ZXN0IDMnIH1cclxuICAgKiBdO1xyXG4gICAqIGBgXHJcbiAgICpcclxuICAgKiBTw7Mgc2Vyw6NvIGFjZWl0b3MgdmFsb3JlcyBjb20gbsO6bWVyb3MgaW50ZWlyb3MgbWFpb3JlcyBkbyBxdWUgemVyby5cclxuICAgKlxyXG4gICAqIENhbXBvcyBzZW0gYG9yZGVyYCBvdSBjb20gdmFsb3JlcyBuZWdhdGl2b3MsIHplcmFkb3Mgb3UgaW52w6FsaWRvc1xyXG4gICAqIHNlcsOjbyBvcyDDumx0aW1vcyBhIHNlcmVtIHJlbmRlcml6YWRvcyBlIHNlZ3VpcsOjbyBvIHBvc2ljaW9uYW1lbnRvIGRlbnRybyBkb1xyXG4gICAqIGFycmF5LlxyXG4gICAqL1xyXG4gIG9yZGVyPzogbnVtYmVyO1xyXG5cclxuICAvKiogTWVuc2FnZW0gcXVlIHNlcsOhIGV4aWJpZGEgZW5xdWFudG8gbyBjYW1wbyBuw6NvIGVzdGl2ZXIgcHJlZW5jaGlkby4gKi9cclxuICBwbGFjZWhvbGRlcj86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogRGVmaW5lIGEgbG9jYWxpZGFkZSBhIHNlciB1dGlsaXphZGEgbm8gY29tcG9uZW50ZS5cclxuICAgKiBQb3IgcGFkcsOjbyBvIHZhbG9yIHNlcsOhIGNvbmZpZ3VyYWRvIHNlZ3VuZG8gYSBvIG3Ds2R1bG8gW2BJMThuYF0oZG9jdW1lbnRhdGlvbi9wby1pMThuKVxyXG4gICAqXHJcbiAgICogRXhlbXBsbyBkZSB1dGlsaXphw6fDo286XHJcbiAgICogYGBcclxuICAgKiBbXHJcbiAgICogICB7IHByb3BlcnR5OiAnYmlydGhkYXknLCBsb2NhbGU6ICdlbicsIHR5cGU6ICdkYXRlJyB9LFxyXG4gICAqICAgeyBwcm9wZXJ0eTogJ3dhZ2UnLCBsb2NhbGU6ICdydScsIHR5cGU6ICdjdXJyZW5jeScgfVxyXG4gICAqIF07XHJcbiAgICogYGBcclxuICAgKlxyXG4gICAqID4gUGFyYSB2ZXIgcXVhaXMgbGluZ3VhZ2VucyBzdXBvcnRhZGFzIGFjZXNzZSBbYEkxOG5gXShkb2N1bWVudGF0aW9uL3BvLWkxOG4pXHJcbiAgICogPiBBIHByb3ByaWVkYWRlIHNlcsOhIHJlcGFzc2FkYSBwYXJhIG9zIGNvbXBvbmVudGVzIHF1ZSBzdXBvcnRhbSBhIG1lc21hLlxyXG4gICAqL1xyXG4gIGxvY2FsZT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogTyBjb250cm9sZSBwYXNzYSBhIHBlcm1pdGlyIGEgZW50cmFkYSBkZSB1bSBpbnRlcnZhbG8gYW8gaW52w6lzIGRlIHVtIMO6bmljbyB2YWxvci5cclxuICAgKlxyXG4gICAqID4gQXR1YWxtZW50ZSBlc3NhIHByb3ByaWVkYWRlIGVzdMOhIGRpc3BvbsOtdmVsIGFwZW5hcyBwYXJhIG8gdGlwbyAnZGF0ZScgZSAnZGF0ZVRpbWUnLlxyXG4gICAqL1xyXG4gIHJhbmdlPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqIEluZGljYSBxdWUgbyBjYW1wbyBzZXLDoSBzb21lbnRlIGxlaXR1cmEuXHJcbiAgICpcclxuICAgKiAqKkNvbXBvbmVudGVzIGNvbXBhdMOtdmVpczoqKiBgcG8tZGF0ZXBpY2tlcmAsIGBwby1kYXRlcGlja2VyLXJhbmdlYCwgYHBvLWlucHV0YCwgYHBvLW51bWJlcmAsIGBwby1kZWNpbWFsYCwgYHBvLXNlbGVjdGAsIGBwby10ZXh0YXJlYWAsIGBwby1wYXNzd29yZGBcclxuICAgKi9cclxuICByZWFkb25seT86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFBlcm1pdGUgYSBzZWxlw6fDo28gZGUgbcO6bHRpcGxvcyBpdGVucy5cclxuICAgKlxyXG4gICAqICoqQ29tcG9uZW50ZSBjb21wYXTDrXZlbDoqKiBgcG8tbG9va3VwYFxyXG4gICAqL1xyXG4gIG11bHRpcGxlPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqIFNlIHZlcmRhZGVpcm8sIG8gY2FtcG8gcmVjZWJlcsOhIHVtIGJvdMOjbyBwYXJhIHNlciBsaW1wby5cclxuICAgKlxyXG4gICAqICoqQ29tcG9uZW50ZXMgY29tcGF0w612ZWlzOioqIGBwby1kYXRlcGlja2VyYCwgYHBvLWRhdGVwaWNrZXItcmFuZ2VgLCBgcG8taW5wdXRgLCBgcG8tbnVtYmVyYCwgYHBvLWRlY2ltYWxgLCBgcG8tY29tYm9gLCBgcG8tbG9va3VwYCwgYHBvLXBhc3N3b3JkYFxyXG4gICAqL1xyXG4gIGNsZWFuPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogRGVmaW5lIGEgcHJvcHJpZWRhZGUgbmF0aXZhIGBhdXRvY29tcGxldGVgIGRvIGNhbXBvIGNvbW8gb2ZmLlxyXG4gICAqXHJcbiAgICogKipDb21wb25lbnRlcyBjb21wYXTDrXZlaXM6KiogYHBvLWRhdGVwaWNrZXJgLCBgcG8tZGF0ZXBpY2tlci1yYW5nZWAsIGBwby1pbnB1dGAsIGBwby1udW1iZXJgLCBgcG8tZGVjaW1hbGAsIGBwby1sb29rdXBgLCBgcG8tcGFzc3dvcmRgXHJcbiAgICovXHJcbiAgbm9BdXRvY29tcGxldGU/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBQb3Npw6fDo28gZGUgZXhpYmnDp8OjbyBkbyByw7N0dWxvIGRvIFBvU3dpY2guXHJcbiAgICogPiBQb3IgcGFkcsOjbyBleGliZSDDoCBkaXJlaXRhLlxyXG4gICAqL1xyXG4gIGxhYmVsUG9zaXRpb24/OiBQb1N3aXRjaExhYmVsUG9zaXRpb247XHJcblxyXG4gIC8qKlxyXG4gICAqIFBlcm1pdGUgZXNjb25kZXIgYSBmdW7Dp8OjbyBkZSBlc3BpYXIgYSBzZW5oYSBkaWdpdGFkYSBubyBgcG8tcGFzc3dvcmRgLlxyXG4gICAqL1xyXG4gIGhpZGVQYXNzd29yZFBlZWs/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBQYWRyw6NvIGRlIGZvcm1hdGHDp8OjbyBwYXJhIHNhw61kYSBkbyBtb2RlbCwgaW5kZXBlbmRlbnRlbWVudGUgZG8gZm9ybWF0byBkZSBlbnRyYWRhLlxyXG4gICAqXHJcbiAgICogPiBWZWphIG9zIHZhbG9yZXMgdsOhbGlkb3Mgbm8gYGVudW1Qb0RhdGVwaWNrZXJJc29Gb3JtYXRgLlxyXG4gICAqXHJcbiAgICogKipDb21wb25lbnRlIGNvbXBhdMOtdmVsOioqIHBvLWRhdGVwaWNrZXJcclxuICAgKi9cclxuICBpc29Gb3JtYXQ/OiBQb0RhdGVwaWNrZXJJc29Gb3JtYXQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIE9iamV0byBjb20gYXMgbGl0ZXJhaXMgdXNhZGFzIHBhcmEgb3Mgc2VndWludGVzIGNvbXBvbmVudGVzOiBgcG8tbG9va3VwYCwgYHBvLW11bHRpc2VsZWN0YCwgYHBvLWNvbWJvYCBlIGBwby1kYXRlcGlja2VyLXJhbmdlYC5cclxuICAgKlxyXG4gICAqID4gTyBvYmpldG8gcGFkcsOjbyBkZSBsaXRlcmFpcyBzZXLDoSB0cmFkdXppZG8gZGUgYWNvcmRvIGNvbSBvIGlkaW9tYSBkbyBQb0kxOG5TZXJ2aWNlIG91IGRvIGJyb3dzZXIuXHJcbiAgICpcclxuICAgKiAqKkNvbXBvbmVudGVzIGNvbXBhdMOtdmVpczoqKiBgcG8tbG9va3VwYCwgYHBvLW11bHRpc2VsZWN0YCwgYHBvLWNvbWJvYCwgYHBvLWRhdGVwaWNrZXItcmFuZ2VgXHJcbiAgICovXHJcbiAgbGl0ZXJhbHM/OiBQb0xvb2t1cExpdGVyYWxzIHwgUG9NdWx0aXNlbGVjdExpdGVyYWxzIHwgUG9Db21ib0xpdGVyYWxzIHwgUG9EYXRlcGlja2VyUmFuZ2VMaXRlcmFscztcclxuXHJcbiAgLyoqXHJcbiAgICogU2UgdmVyZGFkZWlybyBhdGl2YSBhIGZ1bmNpb25hbGlkYWRlIGRlIHNjcm9sbCBpbmZpbml0byBwYXJhIG8gY29tYm8gb3UgbG9va3VwLCBhbyBjaGVnYXIgYW8gZmltIGRhIHRhYmVsYSBleGVjdXRhcsOhIG5vdmEgYnVzY2EgZG9zIGRhZG9zIGNvbmZvcm1lIHBhZ2luYcOnw6NvLlxyXG4gICAqXHJcbiAgICogKipDb21wb25lbnRlcyBjb21wYXTDrXZlaXM6KiogYHBvLWNvbWJvYCwgYHBvLWxvb2t1cGAuXHJcbiAgICovXHJcbiAgaW5maW5pdGVTY3JvbGw/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBEZWZpbmUgbyBwZXJjZW50dWFsIG5lY2Vzc8OhcmlvIHBhcmEgZGlzcGFyYXIgbyBldmVudG8gc2hvdy1tb3JlLCBxdWUgw6kgcmVzcG9uc8OhdmVsIHBvciBjYXJyZWdhciBtYWlzIGRhZG9zIG5vIGNvbWJvLiBDYXNvIG8gdmFsb3Igc2VqYSBtYWlvciBxdWUgMTAwIG91IG1lbm9yIHF1ZSAwLCBvIHZhbG9yIHBhZHLDo28gc2Vyw6EgMTAwJS5cclxuICAgKiAqKkV4ZW1wbG9zKipcclxuICAgKiBgeyBpbmZpbml0ZVNjcm9sbERpc3RhbmNlOiA4MCB9YDogUXVhbmRvIGF0aW5naXIgODAlIGRvIHNjcm9sbCBkbyBjb21ibywgbyBzaG93LW1vcmUgc2Vyw6EgZGlzcGFyYWRvLlxyXG4gICAqXHJcbiAgICogKipDb21wb25lbnRlIGNvbXBhdMOtdmVsOioqIGBwby1jb21ib2AuXHJcbiAgICovXHJcbiAgaW5maW5pdGVTY3JvbGxEaXN0YW5jZT86IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogRGVmaW5lIHF1ZSBhIGFsdHVyYSBkbyBjb21wb25lbnRlIHNlcsOhIGF1dG8gYWp1c3TDoXZlbCwgcG9zc3VpbmRvIHVtYSBhbHR1cmEgbWluaW1hIHBvcsOpbSBhIGFsdHVyYSBtw6F4aW1hIHNlcsOhIGRlIGFjb3JkbyBjb20gbyBuw7ptZXJvIGRlIGl0ZW5zIHNlbGVjaW9uYWRvcyBlIGEgZXh0ZW5zw6NvIGRvcyBtZXNtb3MsIG1hbnRlbmRvLW9zIHNlbXByZSB2aXPDrXZlaXMuXHJcbiAgICpcclxuICAgKiAqKkNvbXBvbmVudGVzIGNvbXBhdMOtdmVpczoqKiBgcG8tbXVsdGlzZWxlY3RgLCBgcG8tbG9va3VwYC5cclxuICAgKi9cclxuICBhdXRvSGVpZ2h0PzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogSW50ZXJ2YWxvIHV0aWxpemFkbyBubyBgcG8tbnVtYmVyYC5cclxuICAgKi9cclxuICBzdGVwPzogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBEZWZpbmUgbyBtb2RvIGRlIHBlc3F1aXNhIHV0aWxpemFkbyBubyBmaWx0cm8gZGEgbGlzdGEgZGUgc2VsZcOnw6NvOiBgc3RhcnRzV2l0aGAsIGBjb250YWluc2Agb3UgYGVuZHNXaXRoYC5cclxuICAgKiA+IFF1YW5kbyB1dGlsaXphciBhIHByb3ByaWVkYWRlIHAtZmlsdGVyLXNlcnZpY2UgZXN0YSBwcm9wcmllZGFkZSBzZXLDoSBpZ25vcmFkYS5cclxuICAgKlxyXG4gICAqICoqQ29tcG9uZW50ZXMgY29tcGF0w612ZWlzOioqIGBwby1tdWx0aXNlbGVjdGAuXHJcbiAgICovXHJcbiAgZmlsdGVyTW9kZT86IFBvTXVsdGlzZWxlY3RGaWx0ZXJNb2RlO1xyXG5cclxuICAvKipcclxuICAgKiBWYWxvciBtw61uaW1vIGRlIGNhcmFjdGVyZXMgcGFyYSByZWFsaXphciBvIGZpbHRybyBubyBzZXJ2acOnbyBkbyBgcG8tY29tYm9gLlxyXG4gICAqL1xyXG4gIGZpbHRlck1pbmxlbmd0aD86IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogRGVzYWJpbGl0YSBvIGZpbHRybyBpbmljaWFsIG5vIHNlcnZpw6dvIGRvIGBwby1jb21ib2AsIHF1ZSDDqSBleGVjdXRhZG8gbm8gcHJpbWVpcm8gY2xpcXVlIG5vIGNhbXBvLlxyXG4gICAqL1xyXG4gIGRpc2FibGVkSW5pdEZpbHRlcj86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFNlIHZlcmRhZGVpcm8sIGRlc2FiaWxpdGFyw6EgYSBidXNjYSBkZSB1bSBpdGVtIHZpYSBUQUIgbm8gYHBvLWNvbWJvYC5cclxuICAgKi9cclxuICBkaXNhYmxlZFRhYkZpbHRlcj86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIEVzdGEgcHJvcHJpZWRhZGUgZGVmaW5lIGVtIHF1YW50byB0ZW1wbyAoZW0gbWlsaXNzZWd1bmRvcyksIGFndWFyZGEgcGFyYSBhY2lvbmFyIG8gZXZlbnRvIGRlIGZpbHRybyBhcMOzcyBjYWRhIHByZXNzaW9uYW1lbnRvIGRlIHRlY2xhLiBTZXLDoSB1dGlsaXphZGEgYXBlbmFzIHF1YW5kbyBob3V2ZXIgc2VydmnDp28gKGBwLWZpbHRlci1zZXJ2aWNlYCkuXHJcbiAgICpcclxuICAgKiAqKkNvbXBvbmVudGVzIGNvbXBhdMOtdmVpczoqKiBgcG8tY29tYm9gLCBgcG8tbXVsdGlzZWxlY3RgLlxyXG4gICAqL1xyXG4gIGRlYm91bmNlVGltZT86IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogSW5kaWNhIHF1ZSBvIGV2ZW50byBgcC1jaGFuZ2VgIHPDsyBzZXLDoSBkaXNwYXJhZG8gYW8gY2xpY2FyIG91IHByZXNzaW9uYXIgYSB0ZWNsYSBcIkVudGVyXCIgc29icmUgdW1hIG9ww6fDo28gc2VsZWNpb25hZGEgbm8gYHBvLWNvbWJvYC5cclxuICAgKi9cclxuICBjaGFuZ2VPbkVudGVyPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogSW5kaWNhIHF1ZSBhIGxpc3RhIGRlZmluaWRhIG5hIHByb3ByaWVkYWRlIHAtb3B0aW9ucyBzZXLDoSBvcmRlbmFkYSBwZWxhIGRlc2NyacOnw6NvLlxyXG4gICAqXHJcbiAgICogKipDb21wb25lbnRlcyBjb21wYXTDrXZlaXM6KiogYHBvLWNvbWJvYCwgcG8tbXVsdGlzZWxlY3RcclxuICAgKi9cclxuICBzb3J0PzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogUGxhY2Vob2xkZXIgZG8gY2FtcG8gZGUgcGVzcXVpc2EgZG8gYHBvLW11bHRpc2VsZWN0YC5cclxuICAgKlxyXG4gICAqID4gQ2FzbyBvIG1lc21vIG7Do28gc2VqYSBpbmZvcm1hZG8sIG8gdmFsb3IgcGFkcsOjbyBzZXLDoSB0cmFkdXppZG8gY29tIGJhc2Ugbm8gaWRpb21hIGRvIG5hdmVnYWRvciAocHQsIGVzIGUgZW4pLlxyXG4gICAqL1xyXG4gIHBsYWNlaG9sZGVyU2VhcmNoPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBFc2NvbmRlIG8gY2FtcG8gZGUgcGVzcXVpc2EgZXhpc3RlbnRlIGRlbnRybyBkbyBkcm9wZG93biBkbyBgcG8tbXVsdGlzZWxlY3RgLlxyXG4gICAqL1xyXG4gIGhpZGVTZWFyY2g/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBJbmRpY2Egc2UgbyBjYW1wbyBcIlNlbGVjaW9uYXIgdG9kb3NcIiBkbyBgcG8tbXVsdGlzZWxlY3RgIHNlcsOhIGVzY29uZGlkby5cclxuICAgKi9cclxuICBoaWRlU2VsZWN0QWxsPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogTGlzdGEgZGUgb2JqZXRvcyBkb3MgY2FtcG9zIHF1ZSBzZXLDo28gY3JpYWRvcyBuYSBidXNjYSBhdmFuw6dhZGEuXHJcbiAgICpcclxuICAgKiA+IENhc28gbsOjbyBzZWphIHBhc3NhZG8gdW0gb2JqZXRvIG91IGVudMOjbyBlbGUgZXN0ZWphIGVtIGJyYW5jbyBvIGxpbmsgZGUgYnVzY2EgYXZhbsOnYWRhIGZpY2Fyw6EgZXNjb25kaWRvLlxyXG4gICAqXHJcbiAgICogRXhlbXBsbyBkZSBVUkwgY29tIGJ1c2NhIGF2YW7Dp2FkYTpcclxuICAgKlxyXG4gICAqIGB1cmwgKyA/cGFnZT0xJnBhZ2VTaXplPTIwJm5hbWU9VG9ueSUyMFN0YXJrJm5pY2tuYW1lPUhvbWVtJTIwZGUlMjBGZXJyb2BcclxuICAgKlxyXG4gICAqIENhc28gYWxndW0gcGFyw6JtZXRybyBzZWphIHVtYSBsaXN0YSwgYSBjb25jYXRlbmHDp8OjbyDDqSBmZWl0YSB1dGlsaXphbmRvIHbDrXJndWxhLiBFeGVtcGxvOlxyXG4gICAqXHJcbiAgICogYHVybCArID9wYWdlPTEmcGFnZVNpemU9MjAmbmFtZT1Ub255JTIwU3RhcmssUGV0ZXIlMjBQYXJrZXIsR29oYW5gXHJcbiAgICovXHJcbiAgYWR2YW5jZWRGaWx0ZXJzPzogQXJyYXk8UG9Mb29rdXBBZHZhbmNlZEZpbHRlcj47XHJcbiAgLyoqXHJcbiAgICogcG9kZSBzZXIgdXRpbGl6YWRhIGVtIGNvbmp1bnRvIGNvbSBhIHByb3ByaWVkYWRlIGBvcHRpb25zYCBmb3LDp2FuZG8gbyBjb21wb25lbnRlIGEgcmVuZGVyaXphciB1bSBgcG8tc2VsZWN0YCBvdSBgcG8tcmFkaW8tZ3JvdXBgLlxyXG4gICAqXHJcbiAgICogVmFsb3JlcyBhY2VpdG9zOlxyXG4gICAqIC0gRm9yY2VPcHRpb25Db21wb25lbnRFbnVtLnJhZGlvR3JvdXBcclxuICAgKiAtIEZvcmNlT3B0aW9uQ29tcG9uZW50RW51bS5zZWxlY3RcclxuICAgKlxyXG4gICAqID5Fc3NhIHByb3ByaWVkYWRlIHNlcsOhIGlnbm9yYWRhIGNhc28gc2VqYSB1dGlsaXphZGEgZW0gY29uanVudG8gY29tIGEgcHJvcHJpZWRhZGUgYG9wdGlvbnNNdWx0aWAgZSBgb3B0aW9uc1NlcnZpY2VgLlxyXG4gICAqL1xyXG4gIGZvcmNlT3B0aW9uc0NvbXBvbmVudFR5cGU/OiBGb3JjZU9wdGlvbkNvbXBvbmVudEVudW07XHJcblxyXG4gIC8qKlxyXG4gICAqIEV2ZW50byBkaXNwYXJhZG8gYW8gZmVjaGFyIG8gcG9wb3ZlciBkbyBnZXJlbmNpYWRvciBkZSBjb2x1bmFzIGFww7NzIGFsdGVyYXIgYXMgY29sdW5hcyB2aXPDrXZlaXMuXHJcbiAgICpcclxuICAgKiBPIGNvbXBvbmVudGUgZW52aWEgY29tbyBwYXLDom1ldHJvIHVtIGFycmF5IGRlIHN0cmluZyBjb20gYXMgY29sdW5hcyB2aXPDrXZlaXMgYXR1YWxpemFkYXMuXHJcbiAgICogUG9yIGV4ZW1wbG86IFtcImlkQ2FyZFwiLCBcIm5hbWVcIiwgXCJoaXJlU3RhdHVzXCIsIFwiYWdlXCJdLlxyXG4gICAqXHJcbiAgICogKipDb21wb25lbnRlcyBjb21wYXTDrXZlaXMqKjogYHBvLWxvb2t1cGBcclxuICAgKi9cclxuICBjaGFuZ2VWaXNpYmxlQ29sdW1ucz86IEZ1bmN0aW9uO1xyXG5cclxuICAvKipcclxuICAgKiBFdmVudG8gZGlzcGFyYWRvIGFvIGNsaWNhciBubyBib3TDo28gZGUgcmVzdGF1cmFyIHBhZHLDo28gbm8gZ2VyZW5jaWFkb3IgZGUgY29sdW5hcy5cclxuICAgKlxyXG4gICAqIE8gY29tcG9uZW50ZSBlbnZpYSBjb21vIHBhcsOibWV0cm8gdW0gYXJyYXkgZGUgc3RyaW5nIGNvbSBhcyBjb2x1bmFzIGNvbmZpZ3VyYWRhcyBpbmljaWFsbWVudGUuXHJcbiAgICogUG9yIGV4ZW1wbG86IFtcImlkQ2FyZFwiLCBcIm5hbWVcIiwgXCJoaXJlU3RhdHVzXCIsIFwiYWdlXCJdLlxyXG4gICAqXHJcbiAgICogKipDb21wb25lbnRlcyBjb21wYXTDrXZlaXMqKjogYHBvLWxvb2t1cGBcclxuICAgKi9cclxuICBjb2x1bW5SZXN0b3JlTWFuYWdlcj86IEZ1bmN0aW9uO1xyXG59XHJcbiJdfQ==