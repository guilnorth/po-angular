import { Input, Directive } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @description
 *
 * Este componente gera uma estrutura de navegação que apresenta ao usuário a localização
 * da URL atual, exibindo as antecessoras conforme é realizado a navegação na aplicação.
 *
 * Quando não houver espaçamento suficiente para exibi-lás, o componente se encarrega também
 * de agrupar as URLs antecessoras, gerando assim um ícone que permite a visualização em cascata.
 *
 * Caso um endereço seja especificado na propriedade `p-favorite-service`, o componente permite ao usuário
 * favoritar a URL.
 *
 * Havendo necessidade de incluir parâmetros na requisição do serviço,
 * o componente dispõe da propriedade `p-params-service` que recebe um objeto contendo as informações.
 */
export class PoBreadcrumbBaseComponent {
    constructor() {
        this.itemsView = [];
        this._items = [];
    }
    /**
     * @description
     *
     * Lista de itens do _breadcrumb_.
     *
     * **Exemplo:**
     * ```
     * { label: 'Po Portal', link: 'portal' }
     * ```
     */
    set items(items) {
        this._items = items;
        this.itemsView = [].concat(items);
    }
    get items() {
        return this._items;
    }
}
PoBreadcrumbBaseComponent.ɵfac = function PoBreadcrumbBaseComponent_Factory(t) { return new (t || PoBreadcrumbBaseComponent)(); };
PoBreadcrumbBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoBreadcrumbBaseComponent, inputs: { favoriteService: ["p-favorite-service", "favoriteService"], paramsService: ["p-params-service", "paramsService"], items: ["p-items", "items"] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBreadcrumbBaseComponent, [{
        type: Directive
    }], null, { favoriteService: [{
            type: Input,
            args: ['p-favorite-service']
        }], paramsService: [{
            type: Input,
            args: ['p-params-service']
        }], items: [{
            type: Input,
            args: ['p-items']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnJlYWRjcnVtYi1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1icmVhZGNydW1iL3BvLWJyZWFkY3J1bWItYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSWpEOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBRUgsTUFBTSxPQUFPLHlCQUF5QjtJQUR0QztRQTBFRSxjQUFTLEdBQTRCLEVBQUUsQ0FBQztRQUtoQyxXQUFNLEdBQTRCLEVBQUUsQ0FBQztLQW9COUM7SUFsQkM7Ozs7Ozs7OztPQVNHO0lBQ0gsSUFBc0IsS0FBSyxDQUFDLEtBQThCO1FBQ3hELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7O2tHQWpHVSx5QkFBeUI7NEVBQXpCLHlCQUF5Qjt1RkFBekIseUJBQXlCO2NBRHJDLFNBQVM7Z0JBK0RxQixlQUFlO2tCQUEzQyxLQUFLO21CQUFDLG9CQUFvQjtZQVNBLGFBQWE7a0JBQXZDLEtBQUs7bUJBQUMsa0JBQWtCO1lBbUJILEtBQUs7a0JBQTFCLEtBQUs7bUJBQUMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFBvQnJlYWRjcnVtYkl0ZW0gfSBmcm9tICcuL3BvLWJyZWFkY3J1bWItaXRlbS5pbnRlcmZhY2UnO1xyXG5cclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBFc3RlIGNvbXBvbmVudGUgZ2VyYSB1bWEgZXN0cnV0dXJhIGRlIG5hdmVnYcOnw6NvIHF1ZSBhcHJlc2VudGEgYW8gdXN1w6FyaW8gYSBsb2NhbGl6YcOnw6NvXHJcbiAqIGRhIFVSTCBhdHVhbCwgZXhpYmluZG8gYXMgYW50ZWNlc3NvcmFzIGNvbmZvcm1lIMOpIHJlYWxpemFkbyBhIG5hdmVnYcOnw6NvIG5hIGFwbGljYcOnw6NvLlxyXG4gKlxyXG4gKiBRdWFuZG8gbsOjbyBob3V2ZXIgZXNwYcOnYW1lbnRvIHN1ZmljaWVudGUgcGFyYSBleGliaS1sw6FzLCBvIGNvbXBvbmVudGUgc2UgZW5jYXJyZWdhIHRhbWLDqW1cclxuICogZGUgYWdydXBhciBhcyBVUkxzIGFudGVjZXNzb3JhcywgZ2VyYW5kbyBhc3NpbSB1bSDDrWNvbmUgcXVlIHBlcm1pdGUgYSB2aXN1YWxpemHDp8OjbyBlbSBjYXNjYXRhLlxyXG4gKlxyXG4gKiBDYXNvIHVtIGVuZGVyZcOnbyBzZWphIGVzcGVjaWZpY2FkbyBuYSBwcm9wcmllZGFkZSBgcC1mYXZvcml0ZS1zZXJ2aWNlYCwgbyBjb21wb25lbnRlIHBlcm1pdGUgYW8gdXN1w6FyaW9cclxuICogZmF2b3JpdGFyIGEgVVJMLlxyXG4gKlxyXG4gKiBIYXZlbmRvIG5lY2Vzc2lkYWRlIGRlIGluY2x1aXIgcGFyw6JtZXRyb3MgbmEgcmVxdWlzacOnw6NvIGRvIHNlcnZpw6dvLFxyXG4gKiBvIGNvbXBvbmVudGUgZGlzcMO1ZSBkYSBwcm9wcmllZGFkZSBgcC1wYXJhbXMtc2VydmljZWAgcXVlIHJlY2ViZSB1bSBvYmpldG8gY29udGVuZG8gYXMgaW5mb3JtYcOnw7Vlcy5cclxuICovXHJcbkBEaXJlY3RpdmUoKVxyXG5leHBvcnQgY2xhc3MgUG9CcmVhZGNydW1iQmFzZUNvbXBvbmVudCB7XHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIFBlcm1pdGUgZGVmaW5pciB1bWEgVVJMIG5vIGNvbXBvbmVudGUgYHBvLWJyZWFkY3J1bWJgIHBhcmEgZmF2b3JpdGFyIG91IGRlc2Zhdm9yaXRhci5cclxuICAgKiA+IFBhcmEgdXRpbGl6YXIgZXN0YSBwcm9wcmllZGFkZSwgbyDDumx0aW1vIGBQb0JyZWFkY3J1bWJJdGVtYCBkYSBsaXN0YSBkZSBpdGVtcyBkYSBwcm9wcmllZGFkZSBgcC1pdGVtc2AgZGV2ZSB0ZXIgdW0gbGluayBpbmZvcm1hZG8uXHJcbiAgICpcclxuICAgKiA+IEEgQVBJIGRldmUgZXN0YXIgcHJlcGFyYWRhIHBhcmEgcmV0b3JuYXIgdW0gb2JqZXRvIG5vIGZvcm1hdG8gYHsgaXNGYXZvcml0ZTogYm9vbGVhbiB9YC5cclxuICAgKlxyXG4gICAqIEFvIGluaWNpYXIsIG8gYHBvLWJyZWFkY3J1bWJgIGZheiB1bSBHRVQgbmEgVVJMIGRlZmluaWRhIG5hIHByb3ByaWVkYWRlIGBwLWZhdm9yaXRlLXNlcnZpY2VgIGUgZGV2ZSByZXRvcm5hciBhIHByb3ByaWVkYWRlXHJcbiAgICogYHsgaXNGYXZvcml0ZTogYm9vbGVhbiB9YCBkbyDDumx0aW1vIGBQb0JyZWFkY3J1bWJJdGVtYCBkZWZpbmlkbyBuYSBsaXN0YSBkZSBpdGVucyBkYSBwcm9wcmllZGFkZSBgcC1pdGVtc2AuXHJcbiAgICpcclxuICAgKiBBbyBjbGljYXIgZW0gZmF2b3JpdGFyIG91IGRlc2Zhdm9yaXRhciBvIGBwby1icmVhZGNydW1iYCBmYXogdW0gUE9TVCBjb20gbyBsaW5rIGUgYSBwcm9wcmllZGFkZSBgeyBpc0Zhdm9yaXRlOiBib29sZWFuIH1gXHJcbiAgICogZGVmaW5pZG9zIG5vIMO6bHRpbW8gaXRlbSBkYSBwcm9wcmllZGFkZSBgcC1pdGVtc2AuXHJcbiAgICpcclxuICAgKiA+IENhc28gYWxndW0gcGFyw6JtZXRybyBzZWphIGRlZmluaWRvIG5hIHByb3ByaWVkYWRlIGBwLXBhcmFtcy1zZXJ2aWNlYCwgbyBtZXNtbyBzZXLDoSBlbnZpYWRvIHBhcmEgYSBBUEkgZSByZXRvcm5hcsOhXHJcbiAgICogYXDDs3MgZmF6ZXIgdW0gR0VUIG91IFBPU1QuXHJcbiAgICpcclxuICAgKiBFeGVtcGxvIGRlIFVSTCBjb250ZW5kbyBvIHNlcnZpw6dvIGRlIGZhdm9yaXRhciBvdSBkZXNmYXZvcml0YXI6XHJcbiAgICpcclxuICAgKiBgYGBcclxuICAgKiBodHRwczovL3BvLXVpLmlvL3NhbXBsZS9hcGkvZmF2b3JpdGVcclxuICAgKiBgYGBcclxuICAgKlxyXG4gICAqIEFvIGZhemVyIG8gR0VUIG8gYHBvLWJyZWFkY3J1bWJgIGNvbmNhdGVuYSBvIGxpbmsgY29tIGEgVVJMIGRlIHNlcnZpw6dvLiBFeGVtcGxvOlxyXG4gICAqXHJcbiAgICogYGBgXHJcbiAgICogR0VUIGh0dHA6Ly88ZG9tYWluPi9hcGkvZmF2b3JpdGU/dXJsPS9leGFtcGxlXHJcbiAgICogYGBgXHJcbiAgICpcclxuICAgKiBgYGBcclxuICAgKiBHRVQgaHR0cDovL3BvLmNvbS5ici9zYW1wbGUvYXBpL2Zhdm9yaXRlP3VybD0vZXhhbXBsZVxyXG4gICAqIGBgYFxyXG4gICAqXHJcbiAgICogYGBgXHJcbiAgICogUE9TVFxyXG4gICAqIHBheWxvYWQ6IHsgaXNGYXZvcml0ZTogdHJ1ZSwgdXJsOiAnL2V4YW1wbGUnIH1cclxuICAgKiBgYGBcclxuICAgKlxyXG4gICAqIENhc28gcG9zc3VhIHBhcsOibWV0cm9zIGRlZmluaWRvcyBuYSBwcm9wcmllZGFkZSBgcC1wYXJhbXMtc2VydmljZWA6XHJcbiAgICpcclxuICAgKiBgYGBcclxuICAgKiBQT1NUXHJcbiAgICogcGF5bG9hZDogeyBpc0Zhdm9yaXRlOiB0cnVlLCB1cmw6IFwiL2V4YW1wbGVcIiwgcGFyYW1zOiBcInsgaWQ6IDE0LCB1c2VyOiAnZGV2LnBvJyB9XCIgfVxyXG4gICAqIGBgYFxyXG4gICAqXHJcbiAgICogRXhlbXBsb3MgZGUgcmV0b3JubzpcclxuICAgKlxyXG4gICAqIGBgYFxyXG4gICAqIHsgaXNGYXZvcml0ZTogdHJ1ZSwgdXJsOiBcIi9leGFtcGxlXCIgfVxyXG4gICAqIGBgYFxyXG4gICAqXHJcbiAgICogYGBgXHJcbiAgICogeyBpc0Zhdm9yaXRlOiBmYWxzZSwgdXJsOiBcIi9leGFtcGxlXCIgfVxyXG4gICAqIGBgYFxyXG4gICAqXHJcbiAgICogYGBgXHJcbiAgICogeyBpc0Zhdm9yaXRlOiBmYWxzZSwgdXJsOiBcIi9leGFtcGxlXCIsIHBhcmFtczogXCJ7IGlkOiAxNCwgdXNlcjogJ2Rldi5wbycgfVwiIH1cclxuICAgKiBgYGBcclxuICAgKi9cclxuICBASW5wdXQoJ3AtZmF2b3JpdGUtc2VydmljZScpIGZhdm9yaXRlU2VydmljZT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIE9iamV0byBxdWUgcG9zc2liaWxpdGEgbyBlbnZpbyBkZSBwYXLDom1ldHJvcyBhZGljaW9uYWlzIMOgIHJlcXVpc2nDp8Ojby5cclxuICAgKi9cclxuICBASW5wdXQoJ3AtcGFyYW1zLXNlcnZpY2UnKSBwYXJhbXNTZXJ2aWNlPzogb2JqZWN0O1xyXG5cclxuICBpdGVtc1ZpZXc6IEFycmF5PFBvQnJlYWRjcnVtYkl0ZW0+ID0gW107XHJcblxyXG4gIHByb3RlY3RlZCBjbGlja291dExpc3RlbmVyOiAoKSA9PiB2b2lkO1xyXG4gIHByb3RlY3RlZCByZXNpemVMaXN0ZW5lcjogKCkgPT4gdm9pZDtcclxuXHJcbiAgcHJpdmF0ZSBfaXRlbXM6IEFycmF5PFBvQnJlYWRjcnVtYkl0ZW0+ID0gW107XHJcblxyXG4gIC8qKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqXHJcbiAgICogTGlzdGEgZGUgaXRlbnMgZG8gX2JyZWFkY3J1bWJfLlxyXG4gICAqXHJcbiAgICogKipFeGVtcGxvOioqXHJcbiAgICogYGBgXHJcbiAgICogeyBsYWJlbDogJ1BvIFBvcnRhbCcsIGxpbms6ICdwb3J0YWwnIH1cclxuICAgKiBgYGBcclxuICAgKi9cclxuICBASW5wdXQoJ3AtaXRlbXMnKSBzZXQgaXRlbXMoaXRlbXM6IEFycmF5PFBvQnJlYWRjcnVtYkl0ZW0+KSB7XHJcbiAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xyXG4gICAgdGhpcy5pdGVtc1ZpZXcgPSBbXS5jb25jYXQoaXRlbXMpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGl0ZW1zKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2l0ZW1zO1xyXG4gIH1cclxufVxyXG4iXX0=